{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType, deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport { alpha } from '../styles/colorManipulator';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nimport useThemeProps from '../styles/useThemeProps';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport capitalize from '../utils/capitalize';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst overridesResolver = (props, styles) => {\n  const {\n    styleProps\n  } = props;\n  const {\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = styleProps;\n  return deepmerge(_extends({}, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon, {\n    [`& .${autocompleteClasses.tag}`]: _extends({}, styles.tag, styles[`tagSize${capitalize(size)}`]),\n    [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot,\n    [`& .${autocompleteClasses.input}`]: _extends({}, styles.input, inputFocused && styles.inputFocused),\n    [`& .${autocompleteClasses.endAdornment}`]: styles.endAdornment,\n    [`& .${autocompleteClasses.clearIndicator}`]: styles.clearIndicator,\n    [`& .${autocompleteClasses.popupIndicator}`]: _extends({}, styles.popupIndicator, popupOpen && styles.popupIndicatorOpen)\n  }), styles.root || {});\n};\nconst overridesResolverPortal = (props, styles) => {\n  const {\n    styleProps\n  } = props;\n  return deepmerge(_extends({}, styleProps.disablePortal && styles.popperDisablePortal, {\n    [`& .${autocompleteClasses.paper}`]: styles.paper,\n    [`& .${autocompleteClasses.listbox}`]: styles.listbox,\n    [`& .${autocompleteClasses.loading}`]: styles.loading,\n    [`& .${autocompleteClasses.noOptions}`]: styles.noOptions,\n    [`& .${autocompleteClasses.option}`]: styles.option,\n    [`& .${autocompleteClasses.groupLabel}`]: styles.groupLabel,\n    [`& .${autocompleteClasses.groupUl}`]: styles.groupUl\n  }), styles.popper || {});\n};\nconst useUtilityClasses = styleProps => {\n  const {\n    classes,\n    disablePortal,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = styleProps;\n  const slots = {\n    root: ['root', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)})`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\nconst AutocompleteRoot = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver\n})(_ref3 => {\n  let {\n    styleProps\n  } = _ref3;\n  return _extends({\n    /* Styles applied to the root element. */\n    [`&.Mui-focused .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    },\n    /* Avoid double tap issue on iOS */\n    '@media (pointer: fine)': {\n      [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n        visibility: 'visible'\n      }\n    }\n  }, styleProps.fullWidth && {\n    width: '100%'\n  }, {\n    /* Styles applied to the tag elements, e.g. the chips. */\n    [`& .${autocompleteClasses.tag}`]: _extends({\n      margin: 3,\n      maxWidth: 'calc(100% - 6px)'\n    }, styleProps.size === 'small' && {\n      margin: 2,\n      maxWidth: 'calc(100% - 4px)'\n    }),\n    /* Styles applied to the Input element. */\n    [`& .${autocompleteClasses.inputRoot}`]: {\n      flexWrap: 'wrap',\n      [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 26 + 4\n      },\n      [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 52 + 4\n      },\n      [`& .${autocompleteClasses.input}`]: {\n        width: 0,\n        minWidth: 30\n      },\n      '&.MuiInput-root': {\n        paddingBottom: 1,\n        '& .MuiInput-input': {\n          padding: '6px 4px 6px 0px'\n        }\n      },\n      '&.MuiInput-root.MuiInputBase-sizeSmall': {\n        '& .MuiInput-input': {\n          padding: '2px 4px 3px 0'\n        }\n      },\n      '&.MuiOutlinedInput-root': {\n        padding: 9,\n        [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n          paddingRight: 26 + 4 + 9\n        },\n        [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n          paddingRight: 52 + 4 + 9\n        },\n        [`& .${autocompleteClasses.input}`]: {\n          padding: '7.5px 4px 7.5px 6px'\n        },\n        [`& .${autocompleteClasses.endAdornment}`]: {\n          right: 9\n        }\n      },\n      '&.MuiOutlinedInput-root.MuiInputBase-sizeSmall': {\n        padding: 6,\n        [`& .${autocompleteClasses.input}`]: {\n          padding: '2.5px 4px 2.5px 6px'\n        }\n      },\n      '&.MuiFilledInput-root': {\n        paddingTop: 19,\n        paddingLeft: 8,\n        [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n          paddingRight: 26 + 4 + 9\n        },\n        [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n          paddingRight: 52 + 4 + 9\n        },\n        '& .MuiFilledInput-input': {\n          padding: '7px 4px'\n        },\n        [`& .${autocompleteClasses.endAdornment}`]: {\n          right: 9\n        }\n      },\n      '&.MuiFilledInput-root.MuiInputBase-sizeSmall': {\n        paddingBottom: 1,\n        '& .MuiFilledInput-input': {\n          padding: '2.5px 4px'\n        }\n      }\n    },\n    /* Styles applied to the input element. */\n    [`& .${autocompleteClasses.input}`]: _extends({\n      flexGrow: 1,\n      textOverflow: 'ellipsis',\n      opacity: 0\n    }, styleProps.inputFocused && {\n      opacity: 1\n    })\n  });\n});\nconst AutocompleteEndAdornment = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment'\n})({\n  /* Styles applied to the endAdornment element. */\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: 'calc(50% - 14px)' // Center vertically\n});\n\nconst AutocompleteClearIndicator = experimentalStyled(IconButton, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator'\n})({\n  /* Styles applied to the clear indicator. */\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = experimentalStyled(IconButton, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator'\n})(_ref4 => {\n  let {\n    styleProps\n  } = _ref4;\n  return _extends({\n    /* Styles applied to the popup indicator. */\n    padding: 2,\n    marginRight: -2\n  }, styleProps.popupOpen && {\n    transform: 'rotate(180deg)'\n  });\n});\nconst AutocompletePopper = experimentalStyled(Popper, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: overridesResolverPortal\n})(_ref5 => {\n  let {\n    theme,\n    styleProps\n  } = _ref5;\n  return _extends({\n    /* Styles applied to the popper element. */\n    zIndex: theme.zIndex.modal\n  }, styleProps.disablePortal && {\n    position: 'absolute'\n  });\n});\nconst AutocompletePaper = experimentalStyled(Paper, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper'\n})(_ref6 => {\n  let {\n    theme\n  } = _ref6;\n  return _extends({}, theme.typography.body1, {\n    overflow: 'auto',\n    margin: '4px 0'\n  });\n});\nconst AutocompleteLoading = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Loading'\n})(_ref7 => {\n  let {\n    theme\n  } = _ref7;\n  return {\n    /* Styles applied to the loading wrapper. */\n    color: theme.palette.text.secondary,\n    padding: '14px 16px'\n  };\n});\nconst AutocompleteNoOptions = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions'\n})(_ref8 => {\n  let {\n    theme\n  } = _ref8;\n  return {\n    /* Styles applied to the no option wrapper. */\n    color: theme.palette.text.secondary,\n    padding: '14px 16px'\n  };\n});\nconst AutocompleteListbox = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox'\n})(_ref9 => {\n  let {\n    theme\n  } = _ref9;\n  return {\n    /* Styles applied to the listbox component. */\n    listStyle: 'none',\n    margin: 0,\n    padding: '8px 0',\n    maxHeight: '40vh',\n    overflow: 'auto',\n    /* Styles applied to the option elements. */\n    [`& .${autocompleteClasses.option}`]: {\n      minHeight: 48,\n      display: 'flex',\n      overflow: 'hidden',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      cursor: 'pointer',\n      paddingTop: 6,\n      boxSizing: 'border-box',\n      outline: '0',\n      WebkitTapHighlightColor: 'transparent',\n      paddingBottom: 6,\n      paddingLeft: 16,\n      paddingRight: 16,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 'auto'\n      },\n      '&[data-focus=\"true\"]': {\n        backgroundColor: theme.palette.action.hover,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      },\n      '&[aria-disabled=\"true\"]': {\n        opacity: theme.palette.action.disabledOpacity,\n        pointerEvents: 'none'\n      },\n      '&.Mui-focusVisible': {\n        backgroundColor: theme.palette.action.focus\n      },\n      '&[aria-selected=\"true\"]': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n        '&[data-focus=\"true\"]': {\n          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: theme.palette.action.selected\n          }\n        },\n        '&.Mui-focusVisible': {\n          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n        }\n      }\n    }\n  };\n});\nconst AutocompleteGroupLabel = experimentalStyled(ListSubheader, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel'\n})(_ref10 => {\n  let {\n    theme\n  } = _ref10;\n  return {\n    /* Styles applied to the group's label elements. */\n    backgroundColor: theme.palette.background.paper,\n    top: -8\n  };\n});\nconst AutocompleteGroupUl = experimentalStyled('ul', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl'\n})({\n  /* Styles applied to the group's ul elements. */\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nvar _ref = /*#__PURE__*/_jsx(ClearIcon, {\n  fontSize: \"small\"\n});\nvar _ref2 = /*#__PURE__*/_jsx(ArrowDropDownIcon, {});\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n  const {\n      autoComplete = false,\n      autoHighlight = false,\n      autoSelect = false,\n      blurOnSelect = false,\n      ChipProps,\n      className,\n      clearIcon = _ref,\n      clearOnBlur = !props.freeSolo,\n      clearOnEscape = false,\n      clearText = 'Clear',\n      closeText = 'Close',\n      defaultValue = props.multiple ? [] : null,\n      disableClearable = false,\n      disableCloseOnSelect = false,\n      disabled = false,\n      disabledItemsFocusable = false,\n      disableListWrap = false,\n      disablePortal = false,\n      filterSelectedOptions = false,\n      forcePopupIcon = 'auto',\n      freeSolo = false,\n      fullWidth = false,\n      getLimitTagsText = more => `+${more}`,\n      getOptionLabel = option => {\n        var _option$label;\n        return (_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option;\n      },\n      groupBy,\n      handleHomeEndKeys = !props.freeSolo,\n      includeInputInList = false,\n      limitTags = -1,\n      ListboxComponent = 'ul',\n      ListboxProps,\n      loading = false,\n      loadingText = 'Loading…',\n      multiple = false,\n      noOptionsText = 'No options',\n      openOnFocus = false,\n      openText = 'Open',\n      PaperComponent = Paper,\n      PopperComponent = Popper,\n      popupIcon = _ref2,\n      renderGroup: renderGroupProp,\n      renderInput,\n      renderOption: renderOptionProp,\n      renderTags,\n      selectOnFocus = !props.freeSolo,\n      size = 'medium'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"getOptionSelected\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"value\"]);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  const hasClearIcon = !disableClearable && !disabled && dirty;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  const styleProps = _extends({}, props, {\n    disablePortal,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  });\n  const classes = useUtilityClasses(styleProps);\n  let startAdornment;\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: clsx(classes.tag),\n      disabled\n    }, getTagProps(params));\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      styleProps: styleProps,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      styleProps: styleProps,\n      children: params.children\n    })]\n  }, params.key);\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/_jsx(\"li\", _extends({}, props2, {\n    children: getOptionLabel(option)\n  }));\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      inputValue\n    });\n  };\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, _extends({\n      ref: ref,\n      className: clsx(classes.root, className),\n      styleProps: styleProps\n    }, getRootProps(other), {\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: {\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n            className: classes.endAdornment,\n            styleProps: styleProps,\n            children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {\n              \"aria-label\": clearText,\n              title: clearText,\n              className: classes.clearIndicator,\n              styleProps: styleProps,\n              children: clearIcon\n            })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {\n              disabled: disabled,\n              \"aria-label\": popupOpen ? closeText : openText,\n              title: popupOpen ? closeText : openText,\n              className: clsx(classes.popupIndicator),\n              styleProps: styleProps,\n              children: popupIcon\n            })) : null]\n          })\n        },\n        inputProps: _extends({\n          className: clsx(classes.input),\n          disabled\n        }, getInputProps())\n      })\n    })), popupOpen && anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, {\n      as: PopperComponent,\n      className: clsx(classes.popper),\n      disablePortal: disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      styleProps: styleProps,\n      role: \"presentation\",\n      anchorEl: anchorEl,\n      open: true,\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, {\n        as: PaperComponent,\n        className: classes.paper,\n        styleProps: styleProps,\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\n          className: classes.loading,\n          styleProps: styleProps,\n          children: loadingText\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n          className: classes.noOptions,\n          styleProps: styleProps,\n          role: \"presentation\",\n          onMouseDown: event => {\n            // Prevent input blur when interacting with the \"no options\" content\n            event.preventDefault();\n          },\n          children: noOptionsText\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(AutocompleteListbox, _extends({\n          as: ListboxComponent,\n          className: classes.listbox,\n          styleProps: styleProps\n        }, getListboxProps(), ListboxProps, {\n          children: groupedOptions.map((option, index) => {\n            if (groupBy) {\n              return renderGroup({\n                key: option.key,\n                group: option.group,\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n              });\n            }\n            return renderListOption(option, index);\n          })\n        })) : null]\n      })\n    }) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n  /**\n   * Props applied to the [`Chip`](/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume his search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * Used to determine if an option is selected, considering the current value(s).\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  getOptionSelected: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n  /**\n   * If `true`, the component is in a loading state.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"create-option\", \"select-option\", \"remove-option\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"select-option\"`, `\"remove-option\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `getOptionSelected` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['Material-UI: The Autocomplete expects the `value` prop to be an array or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_extends","React","PropTypes","clsx","chainPropTypes","integerPropType","deepmerge","unstable_composeClasses","composeClasses","alpha","Popper","ListSubheader","Paper","IconButton","Chip","ClearIcon","ArrowDropDownIcon","useAutocomplete","createFilterOptions","useThemeProps","experimentalStyled","autocompleteClasses","getAutocompleteUtilityClass","capitalize","jsx","_jsx","jsxs","_jsxs","overridesResolver","props","styles","styleProps","fullWidth","hasClearIcon","hasPopupIcon","inputFocused","popupOpen","size","tag","inputRoot","input","endAdornment","clearIndicator","popupIndicator","popupIndicatorOpen","root","overridesResolverPortal","disablePortal","popperDisablePortal","paper","listbox","loading","noOptions","option","groupLabel","groupUl","popper","useUtilityClasses","classes","focused","slots","AutocompleteRoot","name","slot","visibility","width","margin","maxWidth","flexWrap","paddingRight","minWidth","paddingBottom","padding","right","paddingTop","paddingLeft","flexGrow","textOverflow","opacity","AutocompleteEndAdornment","position","top","AutocompleteClearIndicator","marginRight","AutocompletePopupIndicator","transform","AutocompletePopper","theme","zIndex","modal","AutocompletePaper","typography","body1","overflow","AutocompleteLoading","color","palette","text","secondary","AutocompleteNoOptions","AutocompleteListbox","listStyle","maxHeight","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","breakpoints","up","backgroundColor","action","hover","disabledOpacity","pointerEvents","focus","primary","main","selectedOpacity","hoverOpacity","selected","focusOpacity","AutocompleteGroupLabel","background","AutocompleteGroupUl","_ref","fontSize","_ref2","Autocomplete","forwardRef","inProps","ref","autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","className","clearIcon","clearOnBlur","freeSolo","clearOnEscape","clearText","closeText","defaultValue","multiple","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","filterSelectedOptions","forcePopupIcon","getLimitTagsText","more","getOptionLabel","_option$label","label","groupBy","handleHomeEndKeys","includeInputInList","limitTags","ListboxComponent","ListboxProps","loadingText","noOptionsText","openOnFocus","openText","PaperComponent","PopperComponent","popupIcon","renderGroup","renderGroupProp","renderInput","renderOption","renderOptionProp","renderTags","selectOnFocus","other","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","value","dirty","id","focusedTag","anchorEl","setAnchorEl","inputValue","groupedOptions","componentName","startAdornment","length","getCustomizedTagProps","params","map","index","Array","isArray","splice","push","children","defaultRenderGroup","component","group","key","defaultRenderOption","props2","renderListOption","optionProps","Fragment","undefined","InputLabelProps","InputProps","title","inputProps","as","style","clientWidth","role","open","onMouseDown","event","preventDefault","options","option2","index2","process","env","NODE_ENV","propTypes","bool","oneOfType","oneOf","object","string","node","any","filterOptions","func","getOptionDisabled","getOptionSelected","elementType","onChange","onClose","onHighlightChange","onInputChange","onOpen","array","isRequired","sx","Error","join"],"sources":["/Users/shivamrustogi/Documents/GitHub/lab4/node_modules/@material-ui/core/Autocomplete/Autocomplete.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType, deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport { alpha } from '../styles/colorManipulator';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nimport useThemeProps from '../styles/useThemeProps';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport capitalize from '../utils/capitalize';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst overridesResolver = (props, styles) => {\n  const {\n    styleProps\n  } = props;\n  const {\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = styleProps;\n  return deepmerge(_extends({}, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon, {\n    [`& .${autocompleteClasses.tag}`]: _extends({}, styles.tag, styles[`tagSize${capitalize(size)}`]),\n    [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot,\n    [`& .${autocompleteClasses.input}`]: _extends({}, styles.input, inputFocused && styles.inputFocused),\n    [`& .${autocompleteClasses.endAdornment}`]: styles.endAdornment,\n    [`& .${autocompleteClasses.clearIndicator}`]: styles.clearIndicator,\n    [`& .${autocompleteClasses.popupIndicator}`]: _extends({}, styles.popupIndicator, popupOpen && styles.popupIndicatorOpen)\n  }), styles.root || {});\n};\n\nconst overridesResolverPortal = (props, styles) => {\n  const {\n    styleProps\n  } = props;\n  return deepmerge(_extends({}, styleProps.disablePortal && styles.popperDisablePortal, {\n    [`& .${autocompleteClasses.paper}`]: styles.paper,\n    [`& .${autocompleteClasses.listbox}`]: styles.listbox,\n    [`& .${autocompleteClasses.loading}`]: styles.loading,\n    [`& .${autocompleteClasses.noOptions}`]: styles.noOptions,\n    [`& .${autocompleteClasses.option}`]: styles.option,\n    [`& .${autocompleteClasses.groupLabel}`]: styles.groupLabel,\n    [`& .${autocompleteClasses.groupUl}`]: styles.groupUl\n  }), styles.popper || {});\n};\n\nconst useUtilityClasses = styleProps => {\n  const {\n    classes,\n    disablePortal,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = styleProps;\n  const slots = {\n    root: ['root', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)})`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\n\nconst AutocompleteRoot = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver\n})(({\n  styleProps\n}) => _extends({\n  /* Styles applied to the root element. */\n  [`&.Mui-focused .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  }\n}, styleProps.fullWidth && {\n  width: '100%'\n}, {\n  /* Styles applied to the tag elements, e.g. the chips. */\n  [`& .${autocompleteClasses.tag}`]: _extends({\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  }, styleProps.size === 'small' && {\n    margin: 2,\n    maxWidth: 'calc(100% - 4px)'\n  }),\n\n  /* Styles applied to the Input element. */\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    flexWrap: 'wrap',\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    },\n    '&.MuiInput-root': {\n      paddingBottom: 1,\n      '& .MuiInput-input': {\n        padding: '6px 4px 6px 0px'\n      }\n    },\n    '&.MuiInput-root.MuiInputBase-sizeSmall': {\n      '& .MuiInput-input': {\n        padding: '2px 4px 3px 0'\n      }\n    },\n    '&.MuiOutlinedInput-root': {\n      padding: 9,\n      [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 26 + 4 + 9\n      },\n      [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 52 + 4 + 9\n      },\n      [`& .${autocompleteClasses.input}`]: {\n        padding: '7.5px 4px 7.5px 6px'\n      },\n      [`& .${autocompleteClasses.endAdornment}`]: {\n        right: 9\n      }\n    },\n    '&.MuiOutlinedInput-root.MuiInputBase-sizeSmall': {\n      padding: 6,\n      [`& .${autocompleteClasses.input}`]: {\n        padding: '2.5px 4px 2.5px 6px'\n      }\n    },\n    '&.MuiFilledInput-root': {\n      paddingTop: 19,\n      paddingLeft: 8,\n      [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 26 + 4 + 9\n      },\n      [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 52 + 4 + 9\n      },\n      '& .MuiFilledInput-input': {\n        padding: '7px 4px'\n      },\n      [`& .${autocompleteClasses.endAdornment}`]: {\n        right: 9\n      }\n    },\n    '&.MuiFilledInput-root.MuiInputBase-sizeSmall': {\n      paddingBottom: 1,\n      '& .MuiFilledInput-input': {\n        padding: '2.5px 4px'\n      }\n    }\n  },\n\n  /* Styles applied to the input element. */\n  [`& .${autocompleteClasses.input}`]: _extends({\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  }, styleProps.inputFocused && {\n    opacity: 1\n  })\n}));\nconst AutocompleteEndAdornment = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment'\n})({\n  /* Styles applied to the endAdornment element. */\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: 'calc(50% - 14px)' // Center vertically\n\n});\nconst AutocompleteClearIndicator = experimentalStyled(IconButton, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator'\n})({\n  /* Styles applied to the clear indicator. */\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = experimentalStyled(IconButton, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator'\n})(({\n  styleProps\n}) => _extends({\n  /* Styles applied to the popup indicator. */\n  padding: 2,\n  marginRight: -2\n}, styleProps.popupOpen && {\n  transform: 'rotate(180deg)'\n}));\nconst AutocompletePopper = experimentalStyled(Popper, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: overridesResolverPortal\n})(({\n  theme,\n  styleProps\n}) => _extends({\n  /* Styles applied to the popper element. */\n  zIndex: theme.zIndex.modal\n}, styleProps.disablePortal && {\n  position: 'absolute'\n}));\nconst AutocompletePaper = experimentalStyled(Paper, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper'\n})(({\n  theme\n}) => _extends({}, theme.typography.body1, {\n  overflow: 'auto',\n  margin: '4px 0'\n}));\nconst AutocompleteLoading = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Loading'\n})(({\n  theme\n}) => ({\n  /* Styles applied to the loading wrapper. */\n  color: theme.palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteNoOptions = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions'\n})(({\n  theme\n}) => ({\n  /* Styles applied to the no option wrapper. */\n  color: theme.palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteListbox = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox'\n})(({\n  theme\n}) => ({\n  /* Styles applied to the listbox component. */\n  listStyle: 'none',\n  margin: 0,\n  padding: '8px 0',\n  maxHeight: '40vh',\n  overflow: 'auto',\n\n  /* Styles applied to the option elements. */\n  [`& .${autocompleteClasses.option}`]: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    '&[data-focus=\"true\"]': {\n      backgroundColor: theme.palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: theme.palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    '&.Mui-focusVisible': {\n      backgroundColor: theme.palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      '&[data-focus=\"true\"]': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.action.selected\n        }\n      },\n      '&.Mui-focusVisible': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  }\n}));\nconst AutocompleteGroupLabel = experimentalStyled(ListSubheader, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel'\n})(({\n  theme\n}) => ({\n  /* Styles applied to the group's label elements. */\n  backgroundColor: theme.palette.background.paper,\n  top: -8\n}));\nconst AutocompleteGroupUl = experimentalStyled('ul', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl'\n})({\n  /* Styles applied to the group's ul elements. */\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\n\nvar _ref = /*#__PURE__*/_jsx(ClearIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = /*#__PURE__*/_jsx(ArrowDropDownIcon, {});\n\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps,\n    className,\n    clearIcon = _ref,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeText = 'Close',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionLabel = option => {\n      var _option$label;\n\n      return (_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    includeInputInList = false,\n    limitTags = -1,\n    ListboxComponent = 'ul',\n    ListboxProps,\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    noOptionsText = 'No options',\n    openOnFocus = false,\n    openText = 'Open',\n    PaperComponent = Paper,\n    PopperComponent = Popper,\n    popupIcon = _ref2,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"getOptionSelected\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"value\"]);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  const hasClearIcon = !disableClearable && !disabled && dirty;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n\n  const styleProps = _extends({}, props, {\n    disablePortal,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  });\n\n  const classes = useUtilityClasses(styleProps);\n  let startAdornment;\n\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: clsx(classes.tag),\n      disabled\n    }, getTagProps(params));\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      styleProps: styleProps,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      styleProps: styleProps,\n      children: params.children\n    })]\n  }, params.key);\n\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/_jsx(\"li\", _extends({}, props2, {\n    children: getOptionLabel(option)\n  }));\n\n  const renderOption = renderOptionProp || defaultRenderOption;\n\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      inputValue\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, _extends({\n      ref: ref,\n      className: clsx(classes.root, className),\n      styleProps: styleProps\n    }, getRootProps(other), {\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: {\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n            className: classes.endAdornment,\n            styleProps: styleProps,\n            children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {\n              \"aria-label\": clearText,\n              title: clearText,\n              className: classes.clearIndicator,\n              styleProps: styleProps,\n              children: clearIcon\n            })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {\n              disabled: disabled,\n              \"aria-label\": popupOpen ? closeText : openText,\n              title: popupOpen ? closeText : openText,\n              className: clsx(classes.popupIndicator),\n              styleProps: styleProps,\n              children: popupIcon\n            })) : null]\n          })\n        },\n        inputProps: _extends({\n          className: clsx(classes.input),\n          disabled\n        }, getInputProps())\n      })\n    })), popupOpen && anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, {\n      as: PopperComponent,\n      className: clsx(classes.popper),\n      disablePortal: disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      styleProps: styleProps,\n      role: \"presentation\",\n      anchorEl: anchorEl,\n      open: true,\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, {\n        as: PaperComponent,\n        className: classes.paper,\n        styleProps: styleProps,\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\n          className: classes.loading,\n          styleProps: styleProps,\n          children: loadingText\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n          className: classes.noOptions,\n          styleProps: styleProps,\n          role: \"presentation\",\n          onMouseDown: event => {\n            // Prevent input blur when interacting with the \"no options\" content\n            event.preventDefault();\n          },\n          children: noOptionsText\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(AutocompleteListbox, _extends({\n          as: ListboxComponent,\n          className: classes.listbox,\n          styleProps: styleProps\n        }, getListboxProps(), ListboxProps, {\n          children: groupedOptions.map((option, index) => {\n            if (groupBy) {\n              return renderGroup({\n                key: option.key,\n                group: option.group,\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n              });\n            }\n\n            return renderListOption(option, index);\n          })\n        })) : null]\n      })\n    }) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\n   * Props applied to the [`Chip`](/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume his search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * Used to determine if an option is selected, considering the current value(s).\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  getOptionSelected: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\n   * If `true`, the component is in a loading state.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"create-option\", \"select-option\", \"remove-option\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"select-option\"`, `\"remove-option\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`.\n   */\n  onHighlightChange: PropTypes.func,\n\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `getOptionSelected` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['Material-UI: The Autocomplete expects the `value` prop to be an array or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;"],"mappings":"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F;AACA;EACEpF,YAAY,EAAEpK,SAAS,CAACgP,MAAM;EAE9B;AACF;AACA;AACA;EACE/L,OAAO,EAAEjD,SAAS,CAAC6O,IAAI;EAEvB;AACF;AACA;AACA;AACA;AACA;EACExE,WAAW,EAAErK,SAAS,CAACkP,IAAI;EAE3B;AACF;AACA;AACA;EACEhG,QAAQ,EAAElJ,SAAS,CAAC6O,IAAI;EAExB;AACF;AACA;AACA;AACA;AACA;EACEvE,aAAa,EAAEtK,SAAS,CAACkP,IAAI;EAE7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEO,QAAQ,EAAEzP,SAAS,CAACqP,IAAI;EAExB;AACF;AACA;AACA;AACA;AACA;AACA;EACEK,OAAO,EAAE1P,SAAS,CAACqP,IAAI;EAEvB;AACF;AACA;AACA;AACA;AACA;AACA;EACEM,iBAAiB,EAAE3P,SAAS,CAACqP,IAAI;EAEjC;AACF;AACA;AACA;AACA;AACA;AACA;EACEO,aAAa,EAAE5P,SAAS,CAACqP,IAAI;EAE7B;AACF;AACA;AACA;AACA;AACA;EACEQ,MAAM,EAAE7P,SAAS,CAACqP,IAAI;EAEtB;AACF;AACA;EACEnB,IAAI,EAAElO,SAAS,CAAC6O,IAAI;EAEpB;AACF;AACA;AACA;EACEtE,WAAW,EAAEvK,SAAS,CAAC6O,IAAI;EAE3B;AACF;AACA;AACA;AACA;AACA;EACErE,QAAQ,EAAExK,SAAS,CAACiP,MAAM;EAE1B;AACF;AACA;EACEX,OAAO,EAAEtO,SAAS,CAAC8P,KAAK,CAACC,UAAU;EAEnC;AACF;AACA;AACA;EACEtF,cAAc,EAAEzK,SAAS,CAACwP,WAAW;EAErC;AACF;AACA;AACA;EACE9E,eAAe,EAAE1K,SAAS,CAACwP,WAAW;EAEtC;AACF;AACA;AACA;EACE7E,SAAS,EAAE3K,SAAS,CAACkP,IAAI;EAEzB;AACF;AACA;AACA;AACA;AACA;EACEtE,WAAW,EAAE5K,SAAS,CAACqP,IAAI;EAE3B;AACF;AACA;AACA;AACA;AACA;EACEvE,WAAW,EAAE9K,SAAS,CAACqP,IAAI,CAACU,UAAU;EAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEhF,YAAY,EAAE/K,SAAS,CAACqP,IAAI;EAE5B;AACF;AACA;AACA;AACA;AACA;AACA;EACEpE,UAAU,EAAEjL,SAAS,CAACqP,IAAI;EAE1B;AACF;AACA;AACA;AACA;EACEnE,aAAa,EAAElL,SAAS,CAAC6O,IAAI;EAE7B;AACF;AACA;AACA;EACE1M,IAAI,EAAEnC,SAAS,CAAC+O,KAAK,CAAC,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;EAE1C;AACF;AACA;EACEiB,EAAE,EAAEhQ,SAAS,CAACgP,MAAM;EAEpB;AACF;AACA;AACA;AACA;AACA;EACEpD,KAAK,EAAE1L,cAAc,CAACF,SAAS,CAACmP,GAAG,EAAExN,KAAK,IAAI;IAC5C,IAAIA,KAAK,CAACuH,QAAQ,IAAIvH,KAAK,CAACiK,KAAK,KAAK6B,SAAS,IAAI,CAACd,KAAK,CAACC,OAAO,CAACjL,KAAK,CAACiK,KAAK,CAAC,EAAE;MAC9E,OAAO,IAAIqE,KAAK,CAAC,CAAC,qFAAqF,EAAG,YAAWtO,KAAK,CAACiK,KAAM,gBAAe,CAAC,CAACsE,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/J;IAEA,OAAO,IAAI;EACb,CAAC;AACH,CAAC,GAAG,KAAK,CAAC;AACV,eAAejI,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}