{"ast":null,"code":"import React from 'react';\nimport FHIR from 'fhirclient';\n/**\n * Typically the launch page is an empty page with a `SMART.authorize`\n * call in it.\n *\n * This example demonstrates that the call to authorize can be postponed\n * and called manually. In this case we use ReactRouter which will match\n * the `/launch` path and render our component. Then, after our page is\n * rendered we start the auth flow.\n */\n\nexport default class Launcher extends React.Component {\n  /**\n   * This is configured to make a Standalone Launch, just in case it\n   * is loaded directly. An EHR can still launch it by passing `iss`\n   * and `launch` url parameters\n   */\n  componentDidMount() {\n    FHIR.oauth2.authorize({\n      clientId: 'my-client-id',\n      scope: 'launch launch/patient patient/read offline_access'\n    });\n    FHIR.oauth2.ready().then(client => client.request(\"Patient\")).then(console.log('test')).catch(console.error);\n  }\n  /**\n   * Could also return `null` for empty page\n   */\n\n\n  render() {\n    return 'Launching...';\n  }\n\n}","map":{"version":3,"sources":["/Users/rajvansia/Documents/GitHub/lab4-react-working/src/Launcher.js"],"names":["React","FHIR","Launcher","Component","componentDidMount","oauth2","authorize","clientId","scope","ready","then","client","request","console","log","catch","error","render"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,QAAN,SAAuBF,KAAK,CAACG,SAA7B,CAAuC;AACpD;AACF;AACA;AACA;AACA;AACEC,EAAAA,iBAAiB,GAAG;AAClBH,IAAAA,IAAI,CAACI,MAAL,CAAYC,SAAZ,CAAsB;AACpBC,MAAAA,QAAQ,EAAE,cADU;AAEpBC,MAAAA,KAAK,EAAE;AAFa,KAAtB;AAKAP,IAAAA,IAAI,CAACI,MAAL,CAAYI,KAAZ,GACCC,IADD,CACMC,MAAM,IAAIA,MAAM,CAACC,OAAP,CAAe,SAAf,CADhB,EAECF,IAFD,CAEMG,OAAO,CAACC,GAAR,CAAY,MAAZ,CAFN,EAGCC,KAHD,CAGOF,OAAO,CAACG,KAHf;AAID;AACD;AACF;AACA;;;AAEEC,EAAAA,MAAM,GAAG;AACP,WAAO,cAAP;AACD;;AAvBmD","sourcesContent":["import React from 'react';\nimport FHIR from 'fhirclient';\n\n/**\n * Typically the launch page is an empty page with a `SMART.authorize`\n * call in it.\n *\n * This example demonstrates that the call to authorize can be postponed\n * and called manually. In this case we use ReactRouter which will match\n * the `/launch` path and render our component. Then, after our page is\n * rendered we start the auth flow.\n */\nexport default class Launcher extends React.Component {\n  /**\n   * This is configured to make a Standalone Launch, just in case it\n   * is loaded directly. An EHR can still launch it by passing `iss`\n   * and `launch` url parameters\n   */\n  componentDidMount() {\n    FHIR.oauth2.authorize({\n      clientId: 'my-client-id',\n      scope: 'launch launch/patient patient/read offline_access',\n    });\n\n    FHIR.oauth2.ready()\n    .then(client => client.request(\"Patient\"))\n    .then(console.log('test'))\n    .catch(console.error);\n  }\n  /**\n   * Could also return `null` for empty page\n   */\n\n  render() {\n    return 'Launching...';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}