{"ast":null,"code":"var _jsxFileName = \"/Users/rajvansia/Documents/GitHub/material-kit-react/src/components/DashboardLayout.js\",\n    _s = $RefreshSig$();\n\nimport { useState, React } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { experimentalStyled } from '@material-ui/core';\nimport DashboardNavbar from './DashboardNavbar';\nimport DashboardSidebar from './DashboardSidebar';\nimport { FhirClientContext } from '../FhirClientContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardLayoutRoot = experimentalStyled('div')(({\n  theme\n}) => ({\n  backgroundColor: theme.palette.background.default,\n  display: 'flex',\n  height: '100%',\n  overflow: 'hidden',\n  width: '100%'\n}));\nconst DashboardLayoutWrapper = experimentalStyled('div')(({\n  theme\n}) => ({\n  display: 'flex',\n  flex: '1 1 auto',\n  overflow: 'hidden',\n  paddingTop: 64,\n  [theme.breakpoints.up('lg')]: {\n    paddingLeft: 256\n  }\n}));\nconst DashboardLayoutContainer = experimentalStyled('div')({\n  display: 'flex',\n  flex: '1 1 auto',\n  overflow: 'hidden'\n});\nconst DashboardLayoutContent = experimentalStyled('div')({\n  flex: '1 1 auto',\n  height: '100%',\n  overflow: 'auto'\n});\n\nconst DashboardLayouts = () => {\n  _s();\n\n  const [isMobileNavOpen, setMobileNavOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(DashboardLayoutRoot, {\n    children: [/*#__PURE__*/_jsxDEV(DashboardNavbar, {\n      onMobileNavOpen: () => setMobileNavOpen(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DashboardSidebar, {\n      onMobileClose: () => setMobileNavOpen(false),\n      openMobile: isMobileNavOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DashboardLayoutWrapper, {\n      children: /*#__PURE__*/_jsxDEV(DashboardLayoutContainer, {\n        children: /*#__PURE__*/_jsxDEV(DashboardLayoutContent, {\n          children: /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DashboardLayouts, \"cFeSW2VVppyAveewH6Fkr6zm1rM=\");\n\n_c = DashboardLayouts;\nexport default class DashboardLayout extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      patient: null,\n      error: null\n    };\n  } // this loader is used for\n\n\n  componentDidMount() {\n    const client = this.context.client;\n    console.log(client);\n    this._loader = client.patient.read().then(patient => {\n      this.setState({\n        patient,\n        loading: false,\n        error: null\n      });\n    }).catch(error => {\n      this.setState({\n        error,\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const {\n      error,\n      loading,\n      patient\n    } = this.state;\n\n    if (loading) {\n      return null;\n    }\n\n    if (error) {\n      console.log(error.message);\n      return error.message;\n    }\n\n    return /*#__PURE__*/_jsxDEV(DashboardLayouts, { ...patient\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 14\n    }, this);\n  }\n\n}\nDashboardLayout.contextType = FhirClientContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardLayouts\");","map":{"version":3,"sources":["/Users/rajvansia/Documents/GitHub/material-kit-react/src/components/DashboardLayout.js"],"names":["useState","React","Outlet","experimentalStyled","DashboardNavbar","DashboardSidebar","FhirClientContext","DashboardLayoutRoot","theme","backgroundColor","palette","background","default","display","height","overflow","width","DashboardLayoutWrapper","flex","paddingTop","breakpoints","up","paddingLeft","DashboardLayoutContainer","DashboardLayoutContent","DashboardLayouts","isMobileNavOpen","setMobileNavOpen","DashboardLayout","Component","constructor","props","state","loading","patient","error","componentDidMount","client","context","console","log","_loader","read","then","setState","catch","render","message","contextType"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,KAAnB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;;AAEA,MAAMC,mBAAmB,GAAGJ,kBAAkB,CAAC,KAAD,CAAlB,CAC1B,CAAC;AAAEK,EAAAA;AAAF,CAAD,MAAgB;AACdC,EAAAA,eAAe,EAAED,KAAK,CAACE,OAAN,CAAcC,UAAd,CAAyBC,OAD5B;AAEdC,EAAAA,OAAO,EAAE,MAFK;AAGdC,EAAAA,MAAM,EAAE,MAHM;AAIdC,EAAAA,QAAQ,EAAE,QAJI;AAKdC,EAAAA,KAAK,EAAE;AALO,CAAhB,CAD0B,CAA5B;AAUA,MAAMC,sBAAsB,GAAGd,kBAAkB,CAAC,KAAD,CAAlB,CAC7B,CAAC;AAAEK,EAAAA;AAAF,CAAD,MAAgB;AACdK,EAAAA,OAAO,EAAE,MADK;AAEdK,EAAAA,IAAI,EAAE,UAFQ;AAGdH,EAAAA,QAAQ,EAAE,QAHI;AAIdI,EAAAA,UAAU,EAAE,EAJE;AAKd,GAACX,KAAK,CAACY,WAAN,CAAkBC,EAAlB,CAAqB,IAArB,CAAD,GAA8B;AAC5BC,IAAAA,WAAW,EAAE;AADe;AALhB,CAAhB,CAD6B,CAA/B;AAYA,MAAMC,wBAAwB,GAAGpB,kBAAkB,CAAC,KAAD,CAAlB,CAA0B;AACzDU,EAAAA,OAAO,EAAE,MADgD;AAEzDK,EAAAA,IAAI,EAAE,UAFmD;AAGzDH,EAAAA,QAAQ,EAAE;AAH+C,CAA1B,CAAjC;AAMA,MAAMS,sBAAsB,GAAGrB,kBAAkB,CAAC,KAAD,CAAlB,CAA0B;AACvDe,EAAAA,IAAI,EAAE,UADiD;AAEvDJ,EAAAA,MAAM,EAAE,MAF+C;AAGvDC,EAAAA,QAAQ,EAAE;AAH6C,CAA1B,CAA/B;;AAMA,MAAMU,gBAAgB,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,eAAD,EAAkBC,gBAAlB,IAAsC3B,QAAQ,CAAC,KAAD,CAApD;AAEA,sBACE,QAAC,mBAAD;AAAA,4BACE,QAAC,eAAD;AAAiB,MAAA,eAAe,EAAE,MAAM2B,gBAAgB,CAAC,IAAD;AAAxD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,gBAAD;AACE,MAAA,aAAa,EAAE,MAAMA,gBAAgB,CAAC,KAAD,CADvC;AAEE,MAAA,UAAU,EAAED;AAFd;AAAA;AAAA;AAAA;AAAA,YAFF,eAME,QAAC,sBAAD;AAAA,6BACE,QAAC,wBAAD;AAAA,+BACE,QAAC,sBAAD;AAAA,iCACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAnBD;;GAAMD,gB;;KAAAA,gB;AAqBN,eAAe,MAAMG,eAAN,SAA8B3B,KAAK,CAAC4B,SAApC,CAA8C;AAGzDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,IADE;AAEXC,MAAAA,OAAO,EAAE,IAFE;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKD,GAVwD,CAWzD;;;AAEAC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA5B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,SAAKI,OAAL,GAAeJ,MAAM,CAACH,OAAP,CACZQ,IADY,GAEZC,IAFY,CAEPT,OAAO,IAAI;AACf,WAAKU,QAAL,CAAc;AAAEV,QAAAA,OAAF;AAAWD,QAAAA,OAAO,EAAE,KAApB;AAA2BE,QAAAA,KAAK,EAAE;AAAlC,OAAd;AACD,KAJY,EAKZU,KALY,CAKNV,KAAK,IAAI;AACd,WAAKS,QAAL,CAAc;AAAET,QAAAA,KAAF;AAASF,QAAAA,OAAO,EAAE;AAAlB,OAAd;AACD,KAPY,CAAf;AAQD;;AAEDa,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEX,MAAAA,KAAF;AAASF,MAAAA,OAAT;AAAkBC,MAAAA;AAAlB,QAA8B,KAAKF,KAAzC;;AAEA,QAAIC,OAAJ,EAAa;AACX,aAAO,IAAP;AACD;;AACD,QAAIE,KAAJ,EAAW;AACTI,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACY,OAAlB;AACA,aAAOZ,KAAK,CAACY,OAAb;AACD;;AACD,wBAAO,QAAC,gBAAD,OAAsBb;AAAtB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AArCwD;AAAxCN,e,CACVoB,W,GAAc1C,iB","sourcesContent":["import { useState, React } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { experimentalStyled } from '@material-ui/core';\nimport DashboardNavbar from './DashboardNavbar';\nimport DashboardSidebar from './DashboardSidebar';\nimport { FhirClientContext } from '../FhirClientContext';\n\nconst DashboardLayoutRoot = experimentalStyled('div')(\n  ({ theme }) => ({\n    backgroundColor: theme.palette.background.default,\n    display: 'flex',\n    height: '100%',\n    overflow: 'hidden',\n    width: '100%'\n  })\n);\n\nconst DashboardLayoutWrapper = experimentalStyled('div')(\n  ({ theme }) => ({\n    display: 'flex',\n    flex: '1 1 auto',\n    overflow: 'hidden',\n    paddingTop: 64,\n    [theme.breakpoints.up('lg')]: {\n      paddingLeft: 256\n    }\n  })\n);\n\nconst DashboardLayoutContainer = experimentalStyled('div')({\n  display: 'flex',\n  flex: '1 1 auto',\n  overflow: 'hidden'\n});\n\nconst DashboardLayoutContent = experimentalStyled('div')({\n  flex: '1 1 auto',\n  height: '100%',\n  overflow: 'auto'\n});\n\nconst DashboardLayouts = () => {\n  const [isMobileNavOpen, setMobileNavOpen] = useState(false);\n\n  return (\n    <DashboardLayoutRoot>\n      <DashboardNavbar onMobileNavOpen={() => setMobileNavOpen(true)} />\n      <DashboardSidebar\n        onMobileClose={() => setMobileNavOpen(false)}\n        openMobile={isMobileNavOpen}\n      />\n      <DashboardLayoutWrapper>\n        <DashboardLayoutContainer>\n          <DashboardLayoutContent>\n            <Outlet />\n          </DashboardLayoutContent>\n        </DashboardLayoutContainer>\n      </DashboardLayoutWrapper>\n    </DashboardLayoutRoot>\n  );\n};\n\nexport default class DashboardLayout extends React.Component {\n    static contextType = FhirClientContext;\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        loading: true,\n        patient: null,\n        error: null\n      };\n    }\n    // this loader is used for\n\n    componentDidMount() {\n      const client = this.context.client;\n      console.log(client);\n      this._loader = client.patient\n        .read()\n        .then(patient => {\n          this.setState({ patient, loading: false, error: null });\n        })\n        .catch(error => {\n          this.setState({ error, loading: false });\n        });\n    }\n\n    render() {\n      const { error, loading, patient } = this.state;\n\n      if (loading) {\n        return null;\n      }\n      if (error) {\n        console.log(error.message);\n        return error.message;\n      }\n      return <DashboardLayouts {...patient} />;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}