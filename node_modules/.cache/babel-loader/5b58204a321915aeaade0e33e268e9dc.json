{"ast":null,"code":"\"use strict\";\n/*\n * This file contains some shared functions. They are used by other modules, but\n * are defined here so that tests can import this library and test them.\n */\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertJsonPatch = exports.assert = exports.getTargetWindow = exports.getPatientParam = exports.byCodes = exports.byCode = exports.getAccessTokenExpiration = exports.jwtDecode = exports.randomString = exports.absolute = exports.makeArray = exports.setPath = exports.getPath = exports.fetchConformanceStatement = exports.getAndCache = exports.request = exports.responseToJSON = exports.checkResponse = exports.units = exports.debug = void 0;\n\nconst HttpError_1 = require(\"./HttpError\");\n\nconst settings_1 = require(\"./settings\");\n\nconst debug = require(\"debug\"); // $lab:coverage:off$\n// @ts-ignore\n\n\nconst {\n  fetch\n} = typeof FHIRCLIENT_PURE !== \"undefined\" ? window : require(\"cross-fetch\"); // $lab:coverage:on$\n\nconst _debug = debug(\"FHIR\");\n\nexports.debug = _debug;\n/**\n * The cache for the `getAndCache` function\n */\n\nconst cache = {};\n/**\n * A namespace with functions for converting between different measurement units\n */\n\nexports.units = {\n  cm({\n    code,\n    value\n  }) {\n    ensureNumerical({\n      code,\n      value\n    });\n    if (code == \"cm\") return value;\n    if (code == \"m\") return value * 100;\n    if (code == \"in\") return value * 2.54;\n    if (code == \"[in_us]\") return value * 2.54;\n    if (code == \"[in_i]\") return value * 2.54;\n    if (code == \"ft\") return value * 30.48;\n    if (code == \"[ft_us]\") return value * 30.48;\n    throw new Error(\"Unrecognized length unit: \" + code);\n  },\n\n  kg({\n    code,\n    value\n  }) {\n    ensureNumerical({\n      code,\n      value\n    });\n    if (code == \"kg\") return value;\n    if (code == \"g\") return value / 1000;\n    if (code.match(/lb/)) return value / 2.20462;\n    if (code.match(/oz/)) return value / 35.274;\n    throw new Error(\"Unrecognized weight unit: \" + code);\n  },\n\n  any(pq) {\n    ensureNumerical(pq);\n    return pq.value;\n  }\n\n};\n/**\n * Assertion function to guard arguments for `units` functions\n */\n\nfunction ensureNumerical({\n  value,\n  code\n}) {\n  if (typeof value !== \"number\") {\n    throw new Error(\"Found a non-numerical unit: \" + value + \" \" + code);\n  }\n}\n/**\n * Used in fetch Promise chains to reject if the \"ok\" property is not true\n */\n\n\nasync function checkResponse(resp) {\n  if (!resp.ok) {\n    const error = new HttpError_1.default(resp);\n    await error.parse();\n    throw error;\n  }\n\n  return resp;\n}\n\nexports.checkResponse = checkResponse;\n/**\n * Used in fetch Promise chains to return the JSON version of the response.\n * Note that `resp.json()` will throw on empty body so we use resp.text()\n * instead.\n */\n\nfunction responseToJSON(resp) {\n  return resp.text().then(text => text.length ? JSON.parse(text) : \"\");\n}\n\nexports.responseToJSON = responseToJSON;\n/**\n * This is our built-in request function. It does a few things by default\n * (unless told otherwise):\n * - Makes CORS requests\n * - Sets accept header to \"application/json\"\n * - Handles errors\n * - If the response is json return the json object\n * - If the response is text return the result text\n * - Otherwise return the response object on which we call stuff like `.blob()`\n */\n\nfunction request(url, requestOptions = {}) {\n  const {\n    includeResponse\n  } = requestOptions,\n        options = __rest(requestOptions, [\"includeResponse\"]);\n\n  return fetch(url, Object.assign(Object.assign({\n    mode: \"cors\"\n  }, options), {\n    headers: Object.assign({\n      accept: \"application/json\"\n    }, options.headers)\n  })).then(checkResponse).then(res => {\n    const type = res.headers.get(\"Content-Type\") + \"\";\n\n    if (type.match(/\\bjson\\b/i)) {\n      return responseToJSON(res).then(body => ({\n        res,\n        body\n      }));\n    }\n\n    if (type.match(/^text\\//i)) {\n      return res.text().then(body => ({\n        res,\n        body\n      }));\n    }\n\n    return {\n      res\n    };\n  }).then(({\n    res,\n    body\n  }) => {\n    // Some servers will reply after CREATE with json content type but with\n    // empty body. In this case check if a location header is received and\n    // fetch that to use it as the final result.\n    if (!body && res.status == 201) {\n      const location = res.headers.get(\"location\");\n\n      if (location) {\n        return request(location, Object.assign(Object.assign({}, options), {\n          method: \"GET\",\n          body: null,\n          includeResponse\n        }));\n      }\n    }\n\n    if (includeResponse) {\n      return {\n        body,\n        response: res\n      };\n    } // For any non-text and non-json response return the Response object.\n    // This to let users decide if they want to call text(), blob() or\n    // something else on it\n\n\n    if (body === undefined) {\n      return res;\n    } // Otherwise just return the parsed body (can also be \"\" or null)\n\n\n    return body;\n  });\n}\n\nexports.request = request;\n/**\n * Makes a request using `fetch` and stores the result in internal memory cache.\n * The cache is cleared when the page is unloaded.\n * @param url The URL to request\n * @param requestOptions Request options\n * @param force If true, reload from source and update the cache, even if it has\n * already been cached.\n */\n\nfunction getAndCache(url, requestOptions, force = process.env.NODE_ENV === \"test\") {\n  if (force || !cache[url]) {\n    cache[url] = request(url, requestOptions);\n    return cache[url];\n  }\n\n  return Promise.resolve(cache[url]);\n}\n\nexports.getAndCache = getAndCache;\n/**\n * Fetches the conformance statement from the given base URL.\n * Note that the result is cached in memory (until the page is reloaded in the\n * browser) because it might have to be re-used by the client\n * @param baseUrl The base URL of the FHIR server\n * @param [requestOptions] Any options passed to the fetch call\n */\n\nfunction fetchConformanceStatement(baseUrl = \"/\", requestOptions) {\n  const url = String(baseUrl).replace(/\\/*$/, \"/\") + \"metadata\";\n  return getAndCache(url, requestOptions).catch(ex => {\n    throw new Error(`Failed to fetch the conformance statement from \"${url}\". ${ex}`);\n  });\n}\n\nexports.fetchConformanceStatement = fetchConformanceStatement;\n/**\n * Walks through an object (or array) and returns the value found at the\n * provided path. This function is very simple so it intentionally does not\n * support any argument polymorphism, meaning that the path can only be a\n * dot-separated string. If the path is invalid returns undefined.\n * @param obj The object (or Array) to walk through\n * @param path The path (eg. \"a.b.4.c\")\n * @returns {*} Whatever is found in the path or undefined\n */\n\nfunction getPath(obj, path = \"\") {\n  path = path.trim();\n\n  if (!path) {\n    return obj;\n  }\n\n  let segments = path.split(\".\");\n  let result = obj;\n\n  while (result && segments.length) {\n    const key = segments.shift();\n\n    if (!key && Array.isArray(result)) {\n      return result.map(o => getPath(o, segments.join(\".\")));\n    } else {\n      result = result[key];\n    }\n  }\n\n  return result;\n}\n\nexports.getPath = getPath;\n/**\n * Like getPath, but if the node is found, its value is set to @value\n * @param obj The object (or Array) to walk through\n * @param path The path (eg. \"a.b.4.c\")\n * @param value The value to set\n * @param createEmpty If true, create missing intermediate objects or arrays\n * @returns The modified object\n */\n\nfunction setPath(obj, path, value, createEmpty = false) {\n  path.trim().split(\".\").reduce((out, key, idx, arr) => {\n    if (out && idx === arr.length - 1) {\n      out[key] = value;\n    } else {\n      if (out && out[key] === undefined && createEmpty) {\n        out[key] = arr[idx + 1].match(/^[0-9]+$/) ? [] : {};\n      }\n\n      return out ? out[key] : undefined;\n    }\n  }, obj);\n  return obj;\n}\n\nexports.setPath = setPath;\n/**\n * If the argument is an array returns it as is. Otherwise puts it in an array\n * (`[arg]`) and returns the result\n * @param arg The element to test and possibly convert to array\n * @category Utility\n */\n\nfunction makeArray(arg) {\n  if (Array.isArray(arg)) {\n    return arg;\n  }\n\n  return [arg];\n}\n\nexports.makeArray = makeArray;\n/**\n * Given a path, converts it to absolute url based on the `baseUrl`. If baseUrl\n * is not provided, the result would be a rooted path (one that starts with `/`).\n * @param path The path to convert\n * @param baseUrl The base URL\n */\n\nfunction absolute(path, baseUrl) {\n  if (path.match(/^http/)) return path;\n  if (path.match(/^urn/)) return path;\n  return String(baseUrl || \"\").replace(/\\/+$/, \"\") + \"/\" + path.replace(/^\\/+/, \"\");\n}\n\nexports.absolute = absolute;\n/**\n * Generates random strings. By default this returns random 8 characters long\n * alphanumeric strings.\n * @param strLength The length of the output string. Defaults to 8.\n * @param charSet A string containing all the possible characters.\n *     Defaults to all the upper and lower-case letters plus digits.\n * @category Utility\n */\n\nfunction randomString(strLength = 8, charSet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\") {\n  const result = [];\n  const len = charSet.length;\n\n  while (strLength--) {\n    result.push(charSet.charAt(Math.floor(Math.random() * len)));\n  }\n\n  return result.join(\"\");\n}\n\nexports.randomString = randomString;\n/**\n * Decodes a JWT token and returns it's body.\n * @param token The token to read\n * @param env An `Adapter` or any other object that has an `atob` method\n * @category Utility\n */\n\nfunction jwtDecode(token, env) {\n  const payload = token.split(\".\")[1];\n  return payload ? JSON.parse(env.atob(payload)) : null;\n}\n\nexports.jwtDecode = jwtDecode;\n/**\n * Given a token response, computes and returns the expiresAt timestamp.\n * Note that this should only be used immediately after an access token is\n * received, otherwise the computed timestamp will be incorrect.\n * @param tokenResponse\n * @param env\n */\n\nfunction getAccessTokenExpiration(tokenResponse, env) {\n  const now = Math.floor(Date.now() / 1000); // Option 1 - using the expires_in property of the token response\n\n  if (tokenResponse.expires_in) {\n    return now + tokenResponse.expires_in;\n  } // Option 2 - using the exp property of JWT tokens (must not assume JWT!)\n\n\n  if (tokenResponse.access_token) {\n    let tokenBody = jwtDecode(tokenResponse.access_token, env);\n\n    if (tokenBody && tokenBody.exp) {\n      return tokenBody.exp;\n    }\n  } // Option 3 - if none of the above worked set this to 5 minutes after now\n\n\n  return now + 300;\n}\n\nexports.getAccessTokenExpiration = getAccessTokenExpiration;\n/**\n * Groups the observations by code. Returns a map that will look like:\n * ```js\n * const map = client.byCodes(observations, \"code\");\n * // map = {\n * //     \"55284-4\": [ observation1, observation2 ],\n * //     \"6082-2\": [ observation3 ]\n * // }\n * ```\n * @param observations Array of observations\n * @param property The name of a CodeableConcept property to group by\n */\n\nfunction byCode(observations, property) {\n  const ret = {};\n\n  function handleCodeableConcept(concept, observation) {\n    if (concept && Array.isArray(concept.coding)) {\n      concept.coding.forEach(({\n        code\n      }) => {\n        if (code) {\n          ret[code] = ret[code] || [];\n          ret[code].push(observation);\n        }\n      });\n    }\n  }\n\n  makeArray(observations).forEach(o => {\n    if (o.resourceType === \"Observation\" && o[property]) {\n      if (Array.isArray(o[property])) {\n        o[property].forEach(concept => handleCodeableConcept(concept, o));\n      } else {\n        handleCodeableConcept(o[property], o);\n      }\n    }\n  });\n  return ret;\n}\n\nexports.byCode = byCode;\n/**\n * First groups the observations by code using `byCode`. Then returns a function\n * that accepts codes as arguments and will return a flat array of observations\n * having that codes. Example:\n * ```js\n * const filter = client.byCodes(observations, \"category\");\n * filter(\"laboratory\") // => [ observation1, observation2 ]\n * filter(\"vital-signs\") // => [ observation3 ]\n * filter(\"laboratory\", \"vital-signs\") // => [ observation1, observation2, observation3 ]\n * ```\n * @param observations Array of observations\n * @param property The name of a CodeableConcept property to group by\n */\n\nfunction byCodes(observations, property) {\n  const bank = byCode(observations, property);\n  return (...codes) => codes.filter(code => code + \"\" in bank).reduce((prev, code) => prev.concat(bank[code + \"\"]), []);\n}\n\nexports.byCodes = byCodes;\n/**\n * Given a conformance statement and a resource type, returns the name of the\n * URL parameter that can be used to scope the resource type by patient ID.\n */\n\nfunction getPatientParam(conformance, resourceType) {\n  // Find what resources are supported by this server\n  const resources = getPath(conformance, \"rest.0.resource\") || []; // Check if this resource is supported\n\n  const meta = resources.find(r => r.type === resourceType);\n\n  if (!meta) {\n    throw new Error(`Resource \"${resourceType}\" is not supported by this FHIR server`);\n  } // Check if any search parameters are available for this resource\n\n\n  if (!Array.isArray(meta.searchParam)) {\n    throw new Error(`No search parameters supported for \"${resourceType}\" on this FHIR server`);\n  } // This is a rare case but could happen in generic workflows\n\n\n  if (resourceType == \"Patient\" && meta.searchParam.find(x => x.name == \"_id\")) {\n    return \"_id\";\n  } // Now find the first possible parameter name\n\n\n  const out = settings_1.patientParams.find(p => meta.searchParam.find(x => x.name == p)); // If there is no match\n\n  if (!out) {\n    throw new Error(\"I don't know what param to use for \" + resourceType);\n  }\n\n  return out;\n}\n\nexports.getPatientParam = getPatientParam;\n/**\n * Resolves a reference to target window. It may also open new window or tab if\n * the `target = \"popup\"` or `target = \"_blank\"`.\n * @param target\n * @param width Only used when `target = \"popup\"`\n * @param height Only used when `target = \"popup\"`\n */\n\nasync function getTargetWindow(target, width = 800, height = 720) {\n  // The target can be a function that returns the target. This can be\n  // used to open a layer pop-up with an iframe and then return a reference\n  // to that iframe (or its name)\n  if (typeof target == \"function\") {\n    target = await target();\n  } // The target can be a window reference\n\n\n  if (target && typeof target == \"object\") {\n    return target;\n  } // At this point target must be a string\n\n\n  if (typeof target != \"string\") {\n    _debug(\"Invalid target type '%s'. Failing back to '_self'.\", typeof target);\n\n    return self;\n  } // Current window\n\n\n  if (target == \"_self\") {\n    return self;\n  } // The parent frame\n\n\n  if (target == \"_parent\") {\n    return parent;\n  } // The top window\n\n\n  if (target == \"_top\") {\n    return top;\n  } // New tab or window\n\n\n  if (target == \"_blank\") {\n    let error,\n        targetWindow = null;\n\n    try {\n      targetWindow = window.open(\"\", \"SMARTAuthPopup\");\n\n      if (!targetWindow) {\n        throw new Error(\"Perhaps window.open was blocked\");\n      }\n    } catch (e) {\n      error = e;\n    }\n\n    if (!targetWindow) {\n      _debug(\"Cannot open window. Failing back to '_self'. %s\", error);\n\n      return self;\n    } else {\n      return targetWindow;\n    }\n  } // Popup window\n\n\n  if (target == \"popup\") {\n    let error,\n        targetWindow = null; // if (!targetWindow || targetWindow.closed) {\n\n    try {\n      targetWindow = window.open(\"\", \"SMARTAuthPopup\", [\"height=\" + height, \"width=\" + width, \"menubar=0\", \"resizable=1\", \"status=0\", \"top=\" + (screen.height - height) / 2, \"left=\" + (screen.width - width) / 2].join(\",\"));\n\n      if (!targetWindow) {\n        throw new Error(\"Perhaps the popup window was blocked\");\n      }\n    } catch (e) {\n      error = e;\n    }\n\n    if (!targetWindow) {\n      _debug(\"Cannot open window. Failing back to '_self'. %s\", error);\n\n      return self;\n    } else {\n      return targetWindow;\n    }\n  } // Frame or window by name\n\n\n  const winOrFrame = frames[target];\n\n  if (winOrFrame) {\n    return winOrFrame;\n  }\n\n  _debug(\"Unknown target '%s'. Failing back to '_self'.\", target);\n\n  return self;\n}\n\nexports.getTargetWindow = getTargetWindow;\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\nexports.assert = assert;\n\nfunction assertJsonPatch(patch) {\n  assert(Array.isArray(patch), \"The JSON patch must be an array\");\n  assert(patch.length > 0, \"The JSON patch array should not be empty\");\n  patch.forEach(operation => {\n    assert([\"add\", \"replace\", \"test\", \"move\", \"copy\", \"remove\"].indexOf(operation.op) > -1, 'Each patch operation must have an \"op\" property which must be one of: \"add\", \"replace\", \"test\", \"move\", \"copy\", \"remove\"');\n    assert(operation.path && typeof operation.path, `Invalid \"${operation.op}\" operation. Missing \"path\" property`);\n\n    if (operation.op == \"add\" || operation.op == \"replace\" || operation.op == \"test\") {\n      assert(\"value\" in operation, `Invalid \"${operation.op}\" operation. Missing \"value\" property`);\n      assert(Object.keys(operation).length == 3, `Invalid \"${operation.op}\" operation. Contains unknown properties`);\n    } else if (operation.op == \"move\" || operation.op == \"copy\") {\n      assert(typeof operation.from == \"string\", `Invalid \"${operation.op}\" operation. Requires a string \"from\" property`);\n      assert(Object.keys(operation).length == 3, `Invalid \"${operation.op}\" operation. Contains unknown properties`);\n    } else {\n      assert(Object.keys(operation).length == 2, `Invalid \"${operation.op}\" operation. Contains unknown properties`);\n    }\n  });\n}\n\nexports.assertJsonPatch = assertJsonPatch;","map":{"version":3,"sources":["/Users/rajvansia/Documents/GitHub/material-kit-react/node_modules/fhirclient/lib/lib.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","defineProperty","exports","value","assertJsonPatch","assert","getTargetWindow","getPatientParam","byCodes","byCode","getAccessTokenExpiration","jwtDecode","randomString","absolute","makeArray","setPath","getPath","fetchConformanceStatement","getAndCache","request","responseToJSON","checkResponse","units","debug","HttpError_1","require","settings_1","fetch","FHIRCLIENT_PURE","window","_debug","cache","cm","code","ensureNumerical","Error","kg","match","any","pq","resp","ok","error","default","parse","text","then","JSON","url","requestOptions","includeResponse","options","assign","mode","headers","accept","res","type","get","body","status","location","method","response","undefined","force","process","env","NODE_ENV","Promise","resolve","baseUrl","String","replace","catch","ex","obj","path","trim","segments","split","result","key","shift","Array","isArray","map","o","join","createEmpty","reduce","out","idx","arr","arg","strLength","charSet","len","push","charAt","Math","floor","random","token","payload","atob","tokenResponse","now","Date","expires_in","access_token","tokenBody","exp","observations","property","ret","handleCodeableConcept","concept","observation","coding","forEach","resourceType","bank","codes","filter","prev","concat","conformance","resources","meta","find","r","searchParam","x","name","patientParams","target","width","height","self","parent","top","targetWindow","open","screen","winOrFrame","frames","condition","message","patch","operation","op","keys","from"],"mappings":"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","sourcesContent":["\"use strict\";\n/*\n * This file contains some shared functions. They are used by other modules, but\n * are defined here so that tests can import this library and test them.\n */\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertJsonPatch = exports.assert = exports.getTargetWindow = exports.getPatientParam = exports.byCodes = exports.byCode = exports.getAccessTokenExpiration = exports.jwtDecode = exports.randomString = exports.absolute = exports.makeArray = exports.setPath = exports.getPath = exports.fetchConformanceStatement = exports.getAndCache = exports.request = exports.responseToJSON = exports.checkResponse = exports.units = exports.debug = void 0;\n\nconst HttpError_1 = require(\"./HttpError\");\n\nconst settings_1 = require(\"./settings\");\n\nconst debug = require(\"debug\"); // $lab:coverage:off$\n// @ts-ignore\n\n\nconst {\n  fetch\n} = typeof FHIRCLIENT_PURE !== \"undefined\" ? window : require(\"cross-fetch\"); // $lab:coverage:on$\n\nconst _debug = debug(\"FHIR\");\n\nexports.debug = _debug;\n/**\n * The cache for the `getAndCache` function\n */\n\nconst cache = {};\n/**\n * A namespace with functions for converting between different measurement units\n */\n\nexports.units = {\n  cm({\n    code,\n    value\n  }) {\n    ensureNumerical({\n      code,\n      value\n    });\n    if (code == \"cm\") return value;\n    if (code == \"m\") return value * 100;\n    if (code == \"in\") return value * 2.54;\n    if (code == \"[in_us]\") return value * 2.54;\n    if (code == \"[in_i]\") return value * 2.54;\n    if (code == \"ft\") return value * 30.48;\n    if (code == \"[ft_us]\") return value * 30.48;\n    throw new Error(\"Unrecognized length unit: \" + code);\n  },\n\n  kg({\n    code,\n    value\n  }) {\n    ensureNumerical({\n      code,\n      value\n    });\n    if (code == \"kg\") return value;\n    if (code == \"g\") return value / 1000;\n    if (code.match(/lb/)) return value / 2.20462;\n    if (code.match(/oz/)) return value / 35.274;\n    throw new Error(\"Unrecognized weight unit: \" + code);\n  },\n\n  any(pq) {\n    ensureNumerical(pq);\n    return pq.value;\n  }\n\n};\n/**\n * Assertion function to guard arguments for `units` functions\n */\n\nfunction ensureNumerical({\n  value,\n  code\n}) {\n  if (typeof value !== \"number\") {\n    throw new Error(\"Found a non-numerical unit: \" + value + \" \" + code);\n  }\n}\n/**\n * Used in fetch Promise chains to reject if the \"ok\" property is not true\n */\n\n\nasync function checkResponse(resp) {\n  if (!resp.ok) {\n    const error = new HttpError_1.default(resp);\n    await error.parse();\n    throw error;\n  }\n\n  return resp;\n}\n\nexports.checkResponse = checkResponse;\n/**\n * Used in fetch Promise chains to return the JSON version of the response.\n * Note that `resp.json()` will throw on empty body so we use resp.text()\n * instead.\n */\n\nfunction responseToJSON(resp) {\n  return resp.text().then(text => text.length ? JSON.parse(text) : \"\");\n}\n\nexports.responseToJSON = responseToJSON;\n/**\n * This is our built-in request function. It does a few things by default\n * (unless told otherwise):\n * - Makes CORS requests\n * - Sets accept header to \"application/json\"\n * - Handles errors\n * - If the response is json return the json object\n * - If the response is text return the result text\n * - Otherwise return the response object on which we call stuff like `.blob()`\n */\n\nfunction request(url, requestOptions = {}) {\n  const {\n    includeResponse\n  } = requestOptions,\n        options = __rest(requestOptions, [\"includeResponse\"]);\n\n  return fetch(url, Object.assign(Object.assign({\n    mode: \"cors\"\n  }, options), {\n    headers: Object.assign({\n      accept: \"application/json\"\n    }, options.headers)\n  })).then(checkResponse).then(res => {\n    const type = res.headers.get(\"Content-Type\") + \"\";\n\n    if (type.match(/\\bjson\\b/i)) {\n      return responseToJSON(res).then(body => ({\n        res,\n        body\n      }));\n    }\n\n    if (type.match(/^text\\//i)) {\n      return res.text().then(body => ({\n        res,\n        body\n      }));\n    }\n\n    return {\n      res\n    };\n  }).then(({\n    res,\n    body\n  }) => {\n    // Some servers will reply after CREATE with json content type but with\n    // empty body. In this case check if a location header is received and\n    // fetch that to use it as the final result.\n    if (!body && res.status == 201) {\n      const location = res.headers.get(\"location\");\n\n      if (location) {\n        return request(location, Object.assign(Object.assign({}, options), {\n          method: \"GET\",\n          body: null,\n          includeResponse\n        }));\n      }\n    }\n\n    if (includeResponse) {\n      return {\n        body,\n        response: res\n      };\n    } // For any non-text and non-json response return the Response object.\n    // This to let users decide if they want to call text(), blob() or\n    // something else on it\n\n\n    if (body === undefined) {\n      return res;\n    } // Otherwise just return the parsed body (can also be \"\" or null)\n\n\n    return body;\n  });\n}\n\nexports.request = request;\n/**\n * Makes a request using `fetch` and stores the result in internal memory cache.\n * The cache is cleared when the page is unloaded.\n * @param url The URL to request\n * @param requestOptions Request options\n * @param force If true, reload from source and update the cache, even if it has\n * already been cached.\n */\n\nfunction getAndCache(url, requestOptions, force = process.env.NODE_ENV === \"test\") {\n  if (force || !cache[url]) {\n    cache[url] = request(url, requestOptions);\n    return cache[url];\n  }\n\n  return Promise.resolve(cache[url]);\n}\n\nexports.getAndCache = getAndCache;\n/**\n * Fetches the conformance statement from the given base URL.\n * Note that the result is cached in memory (until the page is reloaded in the\n * browser) because it might have to be re-used by the client\n * @param baseUrl The base URL of the FHIR server\n * @param [requestOptions] Any options passed to the fetch call\n */\n\nfunction fetchConformanceStatement(baseUrl = \"/\", requestOptions) {\n  const url = String(baseUrl).replace(/\\/*$/, \"/\") + \"metadata\";\n  return getAndCache(url, requestOptions).catch(ex => {\n    throw new Error(`Failed to fetch the conformance statement from \"${url}\". ${ex}`);\n  });\n}\n\nexports.fetchConformanceStatement = fetchConformanceStatement;\n/**\n * Walks through an object (or array) and returns the value found at the\n * provided path. This function is very simple so it intentionally does not\n * support any argument polymorphism, meaning that the path can only be a\n * dot-separated string. If the path is invalid returns undefined.\n * @param obj The object (or Array) to walk through\n * @param path The path (eg. \"a.b.4.c\")\n * @returns {*} Whatever is found in the path or undefined\n */\n\nfunction getPath(obj, path = \"\") {\n  path = path.trim();\n\n  if (!path) {\n    return obj;\n  }\n\n  let segments = path.split(\".\");\n  let result = obj;\n\n  while (result && segments.length) {\n    const key = segments.shift();\n\n    if (!key && Array.isArray(result)) {\n      return result.map(o => getPath(o, segments.join(\".\")));\n    } else {\n      result = result[key];\n    }\n  }\n\n  return result;\n}\n\nexports.getPath = getPath;\n/**\n * Like getPath, but if the node is found, its value is set to @value\n * @param obj The object (or Array) to walk through\n * @param path The path (eg. \"a.b.4.c\")\n * @param value The value to set\n * @param createEmpty If true, create missing intermediate objects or arrays\n * @returns The modified object\n */\n\nfunction setPath(obj, path, value, createEmpty = false) {\n  path.trim().split(\".\").reduce((out, key, idx, arr) => {\n    if (out && idx === arr.length - 1) {\n      out[key] = value;\n    } else {\n      if (out && out[key] === undefined && createEmpty) {\n        out[key] = arr[idx + 1].match(/^[0-9]+$/) ? [] : {};\n      }\n\n      return out ? out[key] : undefined;\n    }\n  }, obj);\n  return obj;\n}\n\nexports.setPath = setPath;\n/**\n * If the argument is an array returns it as is. Otherwise puts it in an array\n * (`[arg]`) and returns the result\n * @param arg The element to test and possibly convert to array\n * @category Utility\n */\n\nfunction makeArray(arg) {\n  if (Array.isArray(arg)) {\n    return arg;\n  }\n\n  return [arg];\n}\n\nexports.makeArray = makeArray;\n/**\n * Given a path, converts it to absolute url based on the `baseUrl`. If baseUrl\n * is not provided, the result would be a rooted path (one that starts with `/`).\n * @param path The path to convert\n * @param baseUrl The base URL\n */\n\nfunction absolute(path, baseUrl) {\n  if (path.match(/^http/)) return path;\n  if (path.match(/^urn/)) return path;\n  return String(baseUrl || \"\").replace(/\\/+$/, \"\") + \"/\" + path.replace(/^\\/+/, \"\");\n}\n\nexports.absolute = absolute;\n/**\n * Generates random strings. By default this returns random 8 characters long\n * alphanumeric strings.\n * @param strLength The length of the output string. Defaults to 8.\n * @param charSet A string containing all the possible characters.\n *     Defaults to all the upper and lower-case letters plus digits.\n * @category Utility\n */\n\nfunction randomString(strLength = 8, charSet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\") {\n  const result = [];\n  const len = charSet.length;\n\n  while (strLength--) {\n    result.push(charSet.charAt(Math.floor(Math.random() * len)));\n  }\n\n  return result.join(\"\");\n}\n\nexports.randomString = randomString;\n/**\n * Decodes a JWT token and returns it's body.\n * @param token The token to read\n * @param env An `Adapter` or any other object that has an `atob` method\n * @category Utility\n */\n\nfunction jwtDecode(token, env) {\n  const payload = token.split(\".\")[1];\n  return payload ? JSON.parse(env.atob(payload)) : null;\n}\n\nexports.jwtDecode = jwtDecode;\n/**\n * Given a token response, computes and returns the expiresAt timestamp.\n * Note that this should only be used immediately after an access token is\n * received, otherwise the computed timestamp will be incorrect.\n * @param tokenResponse\n * @param env\n */\n\nfunction getAccessTokenExpiration(tokenResponse, env) {\n  const now = Math.floor(Date.now() / 1000); // Option 1 - using the expires_in property of the token response\n\n  if (tokenResponse.expires_in) {\n    return now + tokenResponse.expires_in;\n  } // Option 2 - using the exp property of JWT tokens (must not assume JWT!)\n\n\n  if (tokenResponse.access_token) {\n    let tokenBody = jwtDecode(tokenResponse.access_token, env);\n\n    if (tokenBody && tokenBody.exp) {\n      return tokenBody.exp;\n    }\n  } // Option 3 - if none of the above worked set this to 5 minutes after now\n\n\n  return now + 300;\n}\n\nexports.getAccessTokenExpiration = getAccessTokenExpiration;\n/**\n * Groups the observations by code. Returns a map that will look like:\n * ```js\n * const map = client.byCodes(observations, \"code\");\n * // map = {\n * //     \"55284-4\": [ observation1, observation2 ],\n * //     \"6082-2\": [ observation3 ]\n * // }\n * ```\n * @param observations Array of observations\n * @param property The name of a CodeableConcept property to group by\n */\n\nfunction byCode(observations, property) {\n  const ret = {};\n\n  function handleCodeableConcept(concept, observation) {\n    if (concept && Array.isArray(concept.coding)) {\n      concept.coding.forEach(({\n        code\n      }) => {\n        if (code) {\n          ret[code] = ret[code] || [];\n          ret[code].push(observation);\n        }\n      });\n    }\n  }\n\n  makeArray(observations).forEach(o => {\n    if (o.resourceType === \"Observation\" && o[property]) {\n      if (Array.isArray(o[property])) {\n        o[property].forEach(concept => handleCodeableConcept(concept, o));\n      } else {\n        handleCodeableConcept(o[property], o);\n      }\n    }\n  });\n  return ret;\n}\n\nexports.byCode = byCode;\n/**\n * First groups the observations by code using `byCode`. Then returns a function\n * that accepts codes as arguments and will return a flat array of observations\n * having that codes. Example:\n * ```js\n * const filter = client.byCodes(observations, \"category\");\n * filter(\"laboratory\") // => [ observation1, observation2 ]\n * filter(\"vital-signs\") // => [ observation3 ]\n * filter(\"laboratory\", \"vital-signs\") // => [ observation1, observation2, observation3 ]\n * ```\n * @param observations Array of observations\n * @param property The name of a CodeableConcept property to group by\n */\n\nfunction byCodes(observations, property) {\n  const bank = byCode(observations, property);\n  return (...codes) => codes.filter(code => code + \"\" in bank).reduce((prev, code) => prev.concat(bank[code + \"\"]), []);\n}\n\nexports.byCodes = byCodes;\n/**\n * Given a conformance statement and a resource type, returns the name of the\n * URL parameter that can be used to scope the resource type by patient ID.\n */\n\nfunction getPatientParam(conformance, resourceType) {\n  // Find what resources are supported by this server\n  const resources = getPath(conformance, \"rest.0.resource\") || []; // Check if this resource is supported\n\n  const meta = resources.find(r => r.type === resourceType);\n\n  if (!meta) {\n    throw new Error(`Resource \"${resourceType}\" is not supported by this FHIR server`);\n  } // Check if any search parameters are available for this resource\n\n\n  if (!Array.isArray(meta.searchParam)) {\n    throw new Error(`No search parameters supported for \"${resourceType}\" on this FHIR server`);\n  } // This is a rare case but could happen in generic workflows\n\n\n  if (resourceType == \"Patient\" && meta.searchParam.find(x => x.name == \"_id\")) {\n    return \"_id\";\n  } // Now find the first possible parameter name\n\n\n  const out = settings_1.patientParams.find(p => meta.searchParam.find(x => x.name == p)); // If there is no match\n\n  if (!out) {\n    throw new Error(\"I don't know what param to use for \" + resourceType);\n  }\n\n  return out;\n}\n\nexports.getPatientParam = getPatientParam;\n/**\n * Resolves a reference to target window. It may also open new window or tab if\n * the `target = \"popup\"` or `target = \"_blank\"`.\n * @param target\n * @param width Only used when `target = \"popup\"`\n * @param height Only used when `target = \"popup\"`\n */\n\nasync function getTargetWindow(target, width = 800, height = 720) {\n  // The target can be a function that returns the target. This can be\n  // used to open a layer pop-up with an iframe and then return a reference\n  // to that iframe (or its name)\n  if (typeof target == \"function\") {\n    target = await target();\n  } // The target can be a window reference\n\n\n  if (target && typeof target == \"object\") {\n    return target;\n  } // At this point target must be a string\n\n\n  if (typeof target != \"string\") {\n    _debug(\"Invalid target type '%s'. Failing back to '_self'.\", typeof target);\n\n    return self;\n  } // Current window\n\n\n  if (target == \"_self\") {\n    return self;\n  } // The parent frame\n\n\n  if (target == \"_parent\") {\n    return parent;\n  } // The top window\n\n\n  if (target == \"_top\") {\n    return top;\n  } // New tab or window\n\n\n  if (target == \"_blank\") {\n    let error,\n        targetWindow = null;\n\n    try {\n      targetWindow = window.open(\"\", \"SMARTAuthPopup\");\n\n      if (!targetWindow) {\n        throw new Error(\"Perhaps window.open was blocked\");\n      }\n    } catch (e) {\n      error = e;\n    }\n\n    if (!targetWindow) {\n      _debug(\"Cannot open window. Failing back to '_self'. %s\", error);\n\n      return self;\n    } else {\n      return targetWindow;\n    }\n  } // Popup window\n\n\n  if (target == \"popup\") {\n    let error,\n        targetWindow = null; // if (!targetWindow || targetWindow.closed) {\n\n    try {\n      targetWindow = window.open(\"\", \"SMARTAuthPopup\", [\"height=\" + height, \"width=\" + width, \"menubar=0\", \"resizable=1\", \"status=0\", \"top=\" + (screen.height - height) / 2, \"left=\" + (screen.width - width) / 2].join(\",\"));\n\n      if (!targetWindow) {\n        throw new Error(\"Perhaps the popup window was blocked\");\n      }\n    } catch (e) {\n      error = e;\n    }\n\n    if (!targetWindow) {\n      _debug(\"Cannot open window. Failing back to '_self'. %s\", error);\n\n      return self;\n    } else {\n      return targetWindow;\n    }\n  } // Frame or window by name\n\n\n  const winOrFrame = frames[target];\n\n  if (winOrFrame) {\n    return winOrFrame;\n  }\n\n  _debug(\"Unknown target '%s'. Failing back to '_self'.\", target);\n\n  return self;\n}\n\nexports.getTargetWindow = getTargetWindow;\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\nexports.assert = assert;\n\nfunction assertJsonPatch(patch) {\n  assert(Array.isArray(patch), \"The JSON patch must be an array\");\n  assert(patch.length > 0, \"The JSON patch array should not be empty\");\n  patch.forEach(operation => {\n    assert([\"add\", \"replace\", \"test\", \"move\", \"copy\", \"remove\"].indexOf(operation.op) > -1, 'Each patch operation must have an \"op\" property which must be one of: \"add\", \"replace\", \"test\", \"move\", \"copy\", \"remove\"');\n    assert(operation.path && typeof operation.path, `Invalid \"${operation.op}\" operation. Missing \"path\" property`);\n\n    if (operation.op == \"add\" || operation.op == \"replace\" || operation.op == \"test\") {\n      assert(\"value\" in operation, `Invalid \"${operation.op}\" operation. Missing \"value\" property`);\n      assert(Object.keys(operation).length == 3, `Invalid \"${operation.op}\" operation. Contains unknown properties`);\n    } else if (operation.op == \"move\" || operation.op == \"copy\") {\n      assert(typeof operation.from == \"string\", `Invalid \"${operation.op}\" operation. Requires a string \"from\" property`);\n      assert(Object.keys(operation).length == 3, `Invalid \"${operation.op}\" operation. Contains unknown properties`);\n    } else {\n      assert(Object.keys(operation).length == 2, `Invalid \"${operation.op}\" operation. Contains unknown properties`);\n    }\n  });\n}\n\nexports.assertJsonPatch = assertJsonPatch;"]},"metadata":{},"sourceType":"script"}