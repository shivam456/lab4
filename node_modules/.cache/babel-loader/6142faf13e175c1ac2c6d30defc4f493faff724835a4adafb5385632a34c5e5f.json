{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signCompactJws = exports.importJWK = exports.generatePKCEChallenge = exports.digestSha256 = exports.randomBytes = void 0;\nconst js_base64_1 = require(\"js-base64\");\nconst crypto = typeof globalThis === \"object\" && globalThis.crypto ? globalThis.crypto : require(\"isomorphic-webcrypto\").default;\nconst subtle = crypto.subtle;\nconst ALGS = {\n  ES384: {\n    name: \"ECDSA\",\n    namedCurve: \"P-384\"\n  },\n  RS384: {\n    name: \"RSASSA-PKCS1-v1_5\",\n    modulusLength: 4096,\n    publicExponent: new Uint8Array([1, 0, 1]),\n    hash: {\n      name: 'SHA-384'\n    }\n  }\n};\nfunction randomBytes(count) {\n  return crypto.getRandomValues(new Uint8Array(count));\n}\nexports.randomBytes = randomBytes;\nasync function digestSha256(payload) {\n  const prepared = new TextEncoder().encode(payload);\n  const hash = await subtle.digest('SHA-256', prepared);\n  return new Uint8Array(hash);\n}\nexports.digestSha256 = digestSha256;\nconst generatePKCEChallenge = async function () {\n  let entropy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 96;\n  const inputBytes = randomBytes(entropy);\n  const codeVerifier = (0, js_base64_1.fromUint8Array)(inputBytes, true);\n  const codeChallenge = (0, js_base64_1.fromUint8Array)(await digestSha256(codeVerifier), true);\n  return {\n    codeChallenge,\n    codeVerifier\n  };\n};\nexports.generatePKCEChallenge = generatePKCEChallenge;\nasync function importJWK(jwk) {\n  // alg is optional in JWK but we need it here!\n  if (!jwk.alg) {\n    throw new Error('The \"alg\" property of the JWK must be set to \"ES384\" or \"RS384\"');\n  } // Use of the \"key_ops\" member is OPTIONAL, unless the application requires its presence.\n  // https://www.rfc-editor.org/rfc/rfc7517.html#section-4.3\n  // \n  // In our case the app will only import private keys so we can assume \"sign\"\n\n  if (!Array.isArray(jwk.key_ops)) {\n    jwk.key_ops = [\"sign\"];\n  } // In this case the JWK has a \"key_ops\" array and \"sign\" is not listed\n\n  if (!jwk.key_ops.includes(\"sign\")) {\n    throw new Error('The \"key_ops\" property of the JWK does not contain \"sign\"');\n  }\n  try {\n    return await subtle.importKey(\"jwk\", jwk, ALGS[jwk.alg], jwk.ext === true, jwk.key_ops // || ['sign']\n    );\n  } catch (e) {\n    throw new Error(`The ${jwk.alg} is not supported by this browser: ${e}`);\n  }\n}\nexports.importJWK = importJWK;\nasync function signCompactJws(alg, privateKey, header, payload) {\n  const jwtHeader = JSON.stringify(Object.assign(Object.assign({}, header), {\n    alg\n  }));\n  const jwtPayload = JSON.stringify(payload);\n  const jwtAuthenticatedContent = `${(0, js_base64_1.encodeURL)(jwtHeader)}.${(0, js_base64_1.encodeURL)(jwtPayload)}`;\n  const signature = await subtle.sign(Object.assign(Object.assign({}, privateKey.algorithm), {\n    hash: 'SHA-384'\n  }), privateKey, new TextEncoder().encode(jwtAuthenticatedContent));\n  return `${jwtAuthenticatedContent}.${(0, js_base64_1.fromUint8Array)(new Uint8Array(signature), true)}`;\n}\nexports.signCompactJws = signCompactJws;","map":{"version":3,"names":["Object","defineProperty","exports","value","signCompactJws","importJWK","generatePKCEChallenge","digestSha256","randomBytes","js_base64_1","require","crypto","globalThis","default","subtle","ALGS","ES384","name","namedCurve","RS384","modulusLength","publicExponent","Uint8Array","hash","count","getRandomValues","payload","prepared","TextEncoder","encode","digest","entropy","inputBytes","codeVerifier","fromUint8Array","codeChallenge","jwk","alg","Error","Array","isArray","key_ops","includes","importKey","ext","e","privateKey","header","jwtHeader","JSON","stringify","assign","jwtPayload","jwtAuthenticatedContent","encodeURL","signature","sign","algorithm"],"sources":["/Users/shivamrustogi/Documents/GitHub/lab4/node_modules/fhirclient/lib/security/browser.js"],"sourcesContent":["\"use strict\";\n\nrequire(\"core-js/modules/es.typed-array.set.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signCompactJws = exports.importJWK = exports.generatePKCEChallenge = exports.digestSha256 = exports.randomBytes = void 0;\n\nconst js_base64_1 = require(\"js-base64\");\n\nconst crypto = typeof globalThis === \"object\" && globalThis.crypto ? globalThis.crypto : require(\"isomorphic-webcrypto\").default;\nconst subtle = crypto.subtle;\nconst ALGS = {\n  ES384: {\n    name: \"ECDSA\",\n    namedCurve: \"P-384\"\n  },\n  RS384: {\n    name: \"RSASSA-PKCS1-v1_5\",\n    modulusLength: 4096,\n    publicExponent: new Uint8Array([1, 0, 1]),\n    hash: {\n      name: 'SHA-384'\n    }\n  }\n};\n\nfunction randomBytes(count) {\n  return crypto.getRandomValues(new Uint8Array(count));\n}\n\nexports.randomBytes = randomBytes;\n\nasync function digestSha256(payload) {\n  const prepared = new TextEncoder().encode(payload);\n  const hash = await subtle.digest('SHA-256', prepared);\n  return new Uint8Array(hash);\n}\n\nexports.digestSha256 = digestSha256;\n\nconst generatePKCEChallenge = async (entropy = 96) => {\n  const inputBytes = randomBytes(entropy);\n  const codeVerifier = (0, js_base64_1.fromUint8Array)(inputBytes, true);\n  const codeChallenge = (0, js_base64_1.fromUint8Array)(await digestSha256(codeVerifier), true);\n  return {\n    codeChallenge,\n    codeVerifier\n  };\n};\n\nexports.generatePKCEChallenge = generatePKCEChallenge;\n\nasync function importJWK(jwk) {\n  // alg is optional in JWK but we need it here!\n  if (!jwk.alg) {\n    throw new Error('The \"alg\" property of the JWK must be set to \"ES384\" or \"RS384\"');\n  } // Use of the \"key_ops\" member is OPTIONAL, unless the application requires its presence.\n  // https://www.rfc-editor.org/rfc/rfc7517.html#section-4.3\n  // \n  // In our case the app will only import private keys so we can assume \"sign\"\n\n\n  if (!Array.isArray(jwk.key_ops)) {\n    jwk.key_ops = [\"sign\"];\n  } // In this case the JWK has a \"key_ops\" array and \"sign\" is not listed\n\n\n  if (!jwk.key_ops.includes(\"sign\")) {\n    throw new Error('The \"key_ops\" property of the JWK does not contain \"sign\"');\n  }\n\n  try {\n    return await subtle.importKey(\"jwk\", jwk, ALGS[jwk.alg], jwk.ext === true, jwk.key_ops // || ['sign']\n    );\n  } catch (e) {\n    throw new Error(`The ${jwk.alg} is not supported by this browser: ${e}`);\n  }\n}\n\nexports.importJWK = importJWK;\n\nasync function signCompactJws(alg, privateKey, header, payload) {\n  const jwtHeader = JSON.stringify(Object.assign(Object.assign({}, header), {\n    alg\n  }));\n  const jwtPayload = JSON.stringify(payload);\n  const jwtAuthenticatedContent = `${(0, js_base64_1.encodeURL)(jwtHeader)}.${(0, js_base64_1.encodeURL)(jwtPayload)}`;\n  const signature = await subtle.sign(Object.assign(Object.assign({}, privateKey.algorithm), {\n    hash: 'SHA-384'\n  }), privateKey, new TextEncoder().encode(jwtAuthenticatedContent));\n  return `${jwtAuthenticatedContent}.${(0, js_base64_1.fromUint8Array)(new Uint8Array(signature), true)}`;\n}\n\nexports.signCompactJws = signCompactJws;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}