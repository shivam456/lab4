{"ast":null,"code":"import React from 'react';\nimport { oauth2 as SMART } from 'fhirclient';\nimport FHIR from 'fhirclient';\n\n/**\n * Typically the launch page is an empty page with a `SMART.authorize`\n * call in it.\n *\n * This example demonstrates that the call to authorize can be postponed\n * and called manually. In this case we use ReactRouter which will match\n * the `/launch` path and render our component. Then, after our page is\n * rendered we start the auth flow.\n */\nexport default class Launcher extends React.Component {\n  /**\n   * This is configured to make a Standalone Launch, just in case it\n   * is loaded directly. An EHR can still launch it by passing `iss`\n   * and `launch` url parameters\n   */\n  componentDidMount() {\n    SMART.authorize({\n      clientId: '0e0fb8fd-dfe2-4f45-9b10-f33533297702',\n      scope: 'launch launch/patient patient/read offline_access patient/Patient.read patient/Observation.read patient/Observation.write patient/MedicationRequest.read ',\n      redirectUri: 'https://newapp1234.herokuapp.com/app/dashboard',\n      iss: 'https://fhir-ehr-code.cerner.com/r4/',\n      // iss: 'https://r4.smarthealthit.org',\n\n      completeInTarget: false\n    });\n    FHIR.oauth2.ready().then(client => client.request(\"Patient\")).then(console.log('test')).catch(console.error);\n  }\n\n  /**\n   * Could also return `null` for empty page\n   */\n\n  // componentDidMount() {\n  //   SMART.authorize({\n  //     clientId: 'my-client-id',\n  //     scope: 'launch launch/patient patient/read offline_access',\n  //     redirectUri: './app/dashboard',\n  //     iss: 'https://launch.smarthealthit.org/v/r4/sim/eyJoIjoiMSIsImIiOiI2N2NiZjA5MC00ZGRiLTQ3OTktOTlmZi1hMjhhYmUyNzQwYjEiLCJqIjoiMSJ9/fhir',\n\n  //     completeInTarget: false\n  //   });\n\n  //   FHIR.oauth2.ready()\n  //   .then(client => client.request(\"Patient\"))\n  //   .then(console.log('test'))\n  //   .catch(console.error);\n  // }\n\n  render() {\n    return 'Launching...';\n  }\n}","map":{"version":3,"names":["React","oauth2","SMART","FHIR","Launcher","Component","componentDidMount","authorize","clientId","scope","redirectUri","iss","completeInTarget","ready","then","client","request","console","log","catch","error","render"],"sources":["/Users/shivamrustogi/Documents/GitHub/lab4/src/Launcher.js"],"sourcesContent":["import React from 'react';\nimport { oauth2 as SMART } from 'fhirclient';\nimport FHIR from 'fhirclient';\n\n\n/**\n * Typically the launch page is an empty page with a `SMART.authorize`\n * call in it.\n *\n * This example demonstrates that the call to authorize can be postponed\n * and called manually. In this case we use ReactRouter which will match\n * the `/launch` path and render our component. Then, after our page is\n * rendered we start the auth flow.\n */\nexport default class Launcher extends React.Component {\n  /**\n   * This is configured to make a Standalone Launch, just in case it\n   * is loaded directly. An EHR can still launch it by passing `iss`\n   * and `launch` url parameters\n   */\n  componentDidMount() {\n    SMART.authorize({\n      clientId: '0e0fb8fd-dfe2-4f45-9b10-f33533297702',\n      scope: 'launch launch/patient patient/read offline_access patient/Patient.read patient/Observation.read patient/Observation.write patient/MedicationRequest.read ',\n      redirectUri: 'https://newapp1234.herokuapp.com/app/dashboard',\n      iss: 'https://fhir-ehr-code.cerner.com/r4/',\n      // iss: 'https://r4.smarthealthit.org',\n\n      completeInTarget: false\n    });\n\n    FHIR.oauth2.ready()\n    .then(client => client.request(\"Patient\"))\n    .then(console.log('test'))\n    .catch(console.error);\n  }\n  \n\n\n/**\n * Could also return `null` for empty page\n */\n\n\n\n// componentDidMount() {\n//   SMART.authorize({\n//     clientId: 'my-client-id',\n//     scope: 'launch launch/patient patient/read offline_access',\n//     redirectUri: './app/dashboard',\n//     iss: 'https://launch.smarthealthit.org/v/r4/sim/eyJoIjoiMSIsImIiOiI2N2NiZjA5MC00ZGRiLTQ3OTktOTlmZi1hMjhhYmUyNzQwYjEiLCJqIjoiMSJ9/fhir',\n\n//     completeInTarget: false\n//   });\n\n//   FHIR.oauth2.ready()\n//   .then(client => client.request(\"Patient\"))\n//   .then(console.log('test'))\n//   .catch(console.error);\n// }\n\nrender() {\n  return 'Launching...';\n}\n\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,IAAIC,KAAK,QAAQ,YAAY;AAC5C,OAAOC,IAAI,MAAM,YAAY;;AAG7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,QAAQ,SAASJ,KAAK,CAACK,SAAS,CAAC;EACpD;AACF;AACA;AACA;AACA;EACEC,iBAAiB,GAAG;IAClBJ,KAAK,CAACK,SAAS,CAAC;MACdC,QAAQ,EAAE,sCAAsC;MAChDC,KAAK,EAAE,2JAA2J;MAClKC,WAAW,EAAE,gDAAgD;MAC7DC,GAAG,EAAE,sCAAsC;MAC3C;;MAEAC,gBAAgB,EAAE;IACpB,CAAC,CAAC;IAEFT,IAAI,CAACF,MAAM,CAACY,KAAK,EAAE,CAClBC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,CACzCF,IAAI,CAACG,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC,CAAC,CACzBC,KAAK,CAACF,OAAO,CAACG,KAAK,CAAC;EACvB;;EAIF;AACA;AACA;;EAIA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEAC,MAAM,GAAG;IACP,OAAO,cAAc;EACvB;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}