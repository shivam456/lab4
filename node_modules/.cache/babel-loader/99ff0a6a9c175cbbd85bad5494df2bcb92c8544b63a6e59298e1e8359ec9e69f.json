{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport useEventCallback from '../utils/useEventCallback';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction Ripple(props) {\n  const {\n    className,\n    classes,\n    pulsate = false,\n    rippleX,\n    rippleY,\n    rippleSize,\n    in: inProp,\n    onExited = () => {},\n    timeout\n  } = props;\n  const [leaving, setLeaving] = React.useState(false);\n  const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);\n  const rippleStyles = {\n    width: rippleSize,\n    height: rippleSize,\n    top: -(rippleSize / 2) + rippleY,\n    left: -(rippleSize / 2) + rippleX\n  };\n  const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);\n  const handleExited = useEventCallback(onExited); // Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority\n\n  useEnhancedEffect(() => {\n    if (!inProp) {\n      // react-transition-group#onExit\n      setLeaving(true); // react-transition-group#onExited\n\n      const timeoutId = setTimeout(handleExited, timeout);\n      return () => {\n        clearTimeout(timeoutId);\n      };\n    }\n    return undefined;\n  }, [handleExited, inProp, timeout]);\n  return /*#__PURE__*/_jsx(\"span\", {\n    className: rippleClassName,\n    style: rippleStyles,\n    children: /*#__PURE__*/_jsx(\"span\", {\n      className: childClassName\n    })\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? Ripple.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  /**\n   * @ignore - injected from TransitionGroup\n   */\n  in: PropTypes.bool,\n  /**\n   * @ignore - injected from TransitionGroup\n   */\n  onExited: PropTypes.func,\n  /**\n   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.\n   */\n  pulsate: PropTypes.bool,\n  /**\n   * Diameter of the ripple.\n   */\n  rippleSize: PropTypes.number,\n  /**\n   * Horizontal position of the ripple center.\n   */\n  rippleX: PropTypes.number,\n  /**\n   * Vertical position of the ripple center.\n   */\n  rippleY: PropTypes.number,\n  /**\n   * exit delay\n   */\n  timeout: PropTypes.number.isRequired\n} : void 0;\nexport default Ripple;","map":{"version":3,"names":["React","PropTypes","clsx","useEventCallback","useEnhancedEffect","jsx","_jsx","Ripple","props","className","classes","pulsate","rippleX","rippleY","rippleSize","in","inProp","onExited","timeout","leaving","setLeaving","useState","rippleClassName","ripple","rippleVisible","ripplePulsate","rippleStyles","width","height","top","left","childClassName","child","childLeaving","childPulsate","handleExited","timeoutId","setTimeout","clearTimeout","undefined","style","children","process","env","NODE_ENV","propTypes","object","isRequired","string","bool","func","number"],"sources":["/Users/shivamrustogi/Documents/GitHub/lab4/node_modules/@material-ui/core/ButtonBase/Ripple.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport useEventCallback from '../utils/useEventCallback';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction Ripple(props) {\n  const {\n    className,\n    classes,\n    pulsate = false,\n    rippleX,\n    rippleY,\n    rippleSize,\n    in: inProp,\n    onExited = () => {},\n    timeout\n  } = props;\n  const [leaving, setLeaving] = React.useState(false);\n  const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);\n  const rippleStyles = {\n    width: rippleSize,\n    height: rippleSize,\n    top: -(rippleSize / 2) + rippleY,\n    left: -(rippleSize / 2) + rippleX\n  };\n  const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);\n  const handleExited = useEventCallback(onExited); // Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority\n\n  useEnhancedEffect(() => {\n    if (!inProp) {\n      // react-transition-group#onExit\n      setLeaving(true); // react-transition-group#onExited\n\n      const timeoutId = setTimeout(handleExited, timeout);\n      return () => {\n        clearTimeout(timeoutId);\n      };\n    }\n\n    return undefined;\n  }, [handleExited, inProp, timeout]);\n  return /*#__PURE__*/_jsx(\"span\", {\n    className: rippleClassName,\n    style: rippleStyles,\n    children: /*#__PURE__*/_jsx(\"span\", {\n      className: childClassName\n    })\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Ripple.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n\n  /**\n   * @ignore - injected from TransitionGroup\n   */\n  in: PropTypes.bool,\n\n  /**\n   * @ignore - injected from TransitionGroup\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.\n   */\n  pulsate: PropTypes.bool,\n\n  /**\n   * Diameter of the ripple.\n   */\n  rippleSize: PropTypes.number,\n\n  /**\n   * Horizontal position of the ripple center.\n   */\n  rippleX: PropTypes.number,\n\n  /**\n   * Vertical position of the ripple center.\n   */\n  rippleY: PropTypes.number,\n\n  /**\n   * exit delay\n   */\n  timeout: PropTypes.number.isRequired\n} : void 0;\nexport default Ripple;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}