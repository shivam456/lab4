{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass Storage {\n  /**\n   * Gets the value at `key`. Returns a promise that will be resolved\n   * with that value (or undefined for missing keys).\n   */\n  async get(key) {\n    const value = sessionStorage[key];\n\n    if (value) {\n      return JSON.parse(value);\n    }\n\n    return null;\n  }\n  /**\n   * Sets the `value` on `key` and returns a promise that will be resolved\n   * with the value that was set.\n   */\n\n\n  async set(key, value) {\n    sessionStorage[key] = JSON.stringify(value);\n    return value;\n  }\n  /**\n   * Deletes the value at `key`. Returns a promise that will be resolved\n   * with true if the key was deleted or with false if it was not (eg. if\n   * did not exist).\n   */\n\n\n  async unset(key) {\n    if (key in sessionStorage) {\n      delete sessionStorage[key];\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexports.default = Storage;","map":{"version":3,"sources":["/Users/rajvansia/Documents/GitHub/material-kit-react/node_modules/fhirclient/lib/storage/BrowserStorage.js"],"names":["Object","defineProperty","exports","value","Storage","get","key","sessionStorage","JSON","parse","set","stringify","unset","default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,MAAMC,OAAN,CAAc;AACZ;AACF;AACA;AACA;AACW,QAAHC,GAAG,CAACC,GAAD,EAAM;AACb,UAAMH,KAAK,GAAGI,cAAc,CAACD,GAAD,CAA5B;;AAEA,QAAIH,KAAJ,EAAW;AACT,aAAOK,IAAI,CAACC,KAAL,CAAWN,KAAX,CAAP;AACD;;AAED,WAAO,IAAP;AACD;AACD;AACF;AACA;AACA;;;AAGW,QAAHO,GAAG,CAACJ,GAAD,EAAMH,KAAN,EAAa;AACpBI,IAAAA,cAAc,CAACD,GAAD,CAAd,GAAsBE,IAAI,CAACG,SAAL,CAAeR,KAAf,CAAtB;AACA,WAAOA,KAAP;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGa,QAALS,KAAK,CAACN,GAAD,EAAM;AACf,QAAIA,GAAG,IAAIC,cAAX,EAA2B;AACzB,aAAOA,cAAc,CAACD,GAAD,CAArB;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAtCW;;AA0CdJ,OAAO,CAACW,OAAR,GAAkBT,OAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass Storage {\n  /**\n   * Gets the value at `key`. Returns a promise that will be resolved\n   * with that value (or undefined for missing keys).\n   */\n  async get(key) {\n    const value = sessionStorage[key];\n\n    if (value) {\n      return JSON.parse(value);\n    }\n\n    return null;\n  }\n  /**\n   * Sets the `value` on `key` and returns a promise that will be resolved\n   * with the value that was set.\n   */\n\n\n  async set(key, value) {\n    sessionStorage[key] = JSON.stringify(value);\n    return value;\n  }\n  /**\n   * Deletes the value at `key`. Returns a promise that will be resolved\n   * with true if the key was deleted or with false if it was not (eg. if\n   * did not exist).\n   */\n\n\n  async unset(key) {\n    if (key in sessionStorage) {\n      delete sessionStorage[key];\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexports.default = Storage;"]},"metadata":{},"sourceType":"script"}