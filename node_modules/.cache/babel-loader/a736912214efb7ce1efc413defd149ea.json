{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass HttpError extends Error {\n  constructor(response) {\n    super(`${response.status} ${response.statusText}\\nURL: ${response.url}`);\n    this.name = \"HttpError\";\n    this.response = response;\n    this.statusCode = response.status;\n    this.status = response.status;\n    this.statusText = response.statusText;\n  }\n\n  async parse() {\n    if (!this.response.bodyUsed) {\n      try {\n        const type = this.response.headers.get(\"Content-Type\") || \"text/plain\";\n\n        if (type.match(/\\bjson\\b/i)) {\n          let body = await this.response.json();\n\n          if (body.error) {\n            this.message += \"\\n\" + body.error;\n\n            if (body.error_description) {\n              this.message += \": \" + body.error_description;\n            }\n          } else {\n            this.message += \"\\n\\n\" + JSON.stringify(body, null, 4);\n          }\n        } else if (type.match(/^text\\//i)) {\n          let body = await this.response.text();\n\n          if (body) {\n            this.message += \"\\n\\n\" + body;\n          }\n        }\n      } catch (_a) {// ignore\n      }\n    }\n\n    return this;\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      statusCode: this.statusCode,\n      status: this.status,\n      statusText: this.statusText,\n      message: this.message\n    };\n  }\n\n}\n\nexports.default = HttpError;","map":{"version":3,"sources":["/Users/rajvansia/Documents/GitHub/material-kit-react/node_modules/fhirclient/lib/HttpError.js"],"names":["Object","defineProperty","exports","value","HttpError","Error","constructor","response","status","statusText","url","name","statusCode","parse","bodyUsed","type","headers","get","match","body","json","error","message","error_description","JSON","stringify","text","_a","toJSON","default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,MAAMC,SAAN,SAAwBC,KAAxB,CAA8B;AAC5BC,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,UAAO,GAAEA,QAAQ,CAACC,MAAO,IAAGD,QAAQ,CAACE,UAAW,UAASF,QAAQ,CAACG,GAAI,EAAtE;AACA,SAAKC,IAAL,GAAY,WAAZ;AACA,SAAKJ,QAAL,GAAgBA,QAAhB;AACA,SAAKK,UAAL,GAAkBL,QAAQ,CAACC,MAA3B;AACA,SAAKA,MAAL,GAAcD,QAAQ,CAACC,MAAvB;AACA,SAAKC,UAAL,GAAkBF,QAAQ,CAACE,UAA3B;AACD;;AAEU,QAALI,KAAK,GAAG;AACZ,QAAI,CAAC,KAAKN,QAAL,CAAcO,QAAnB,EAA6B;AAC3B,UAAI;AACF,cAAMC,IAAI,GAAG,KAAKR,QAAL,CAAcS,OAAd,CAAsBC,GAAtB,CAA0B,cAA1B,KAA6C,YAA1D;;AAEA,YAAIF,IAAI,CAACG,KAAL,CAAW,WAAX,CAAJ,EAA6B;AAC3B,cAAIC,IAAI,GAAG,MAAM,KAAKZ,QAAL,CAAca,IAAd,EAAjB;;AAEA,cAAID,IAAI,CAACE,KAAT,EAAgB;AACd,iBAAKC,OAAL,IAAgB,OAAOH,IAAI,CAACE,KAA5B;;AAEA,gBAAIF,IAAI,CAACI,iBAAT,EAA4B;AAC1B,mBAAKD,OAAL,IAAgB,OAAOH,IAAI,CAACI,iBAA5B;AACD;AACF,WAND,MAMO;AACL,iBAAKD,OAAL,IAAgB,SAASE,IAAI,CAACC,SAAL,CAAeN,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAzB;AACD;AACF,SAZD,MAYO,IAAIJ,IAAI,CAACG,KAAL,CAAW,UAAX,CAAJ,EAA4B;AACjC,cAAIC,IAAI,GAAG,MAAM,KAAKZ,QAAL,CAAcmB,IAAd,EAAjB;;AAEA,cAAIP,IAAJ,EAAU;AACR,iBAAKG,OAAL,IAAgB,SAASH,IAAzB;AACD;AACF;AACF,OAtBD,CAsBE,OAAOQ,EAAP,EAAW,CAAC;AACb;AACF;;AAED,WAAO,IAAP;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WAAO;AACLjB,MAAAA,IAAI,EAAE,KAAKA,IADN;AAELC,MAAAA,UAAU,EAAE,KAAKA,UAFZ;AAGLJ,MAAAA,MAAM,EAAE,KAAKA,MAHR;AAILC,MAAAA,UAAU,EAAE,KAAKA,UAJZ;AAKLa,MAAAA,OAAO,EAAE,KAAKA;AALT,KAAP;AAOD;;AAjD2B;;AAqD9BpB,OAAO,CAAC2B,OAAR,GAAkBzB,SAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass HttpError extends Error {\n  constructor(response) {\n    super(`${response.status} ${response.statusText}\\nURL: ${response.url}`);\n    this.name = \"HttpError\";\n    this.response = response;\n    this.statusCode = response.status;\n    this.status = response.status;\n    this.statusText = response.statusText;\n  }\n\n  async parse() {\n    if (!this.response.bodyUsed) {\n      try {\n        const type = this.response.headers.get(\"Content-Type\") || \"text/plain\";\n\n        if (type.match(/\\bjson\\b/i)) {\n          let body = await this.response.json();\n\n          if (body.error) {\n            this.message += \"\\n\" + body.error;\n\n            if (body.error_description) {\n              this.message += \": \" + body.error_description;\n            }\n          } else {\n            this.message += \"\\n\\n\" + JSON.stringify(body, null, 4);\n          }\n        } else if (type.match(/^text\\//i)) {\n          let body = await this.response.text();\n\n          if (body) {\n            this.message += \"\\n\\n\" + body;\n          }\n        }\n      } catch (_a) {// ignore\n      }\n    }\n\n    return this;\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      statusCode: this.statusCode,\n      status: this.status,\n      statusText: this.statusText,\n      message: this.message\n    };\n  }\n\n}\n\nexports.default = HttpError;"]},"metadata":{},"sourceType":"script"}