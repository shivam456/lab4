{"ast":null,"code":"import React from 'react';\nimport { oauth2 as SMART } from 'fhirclient';\n/**\n * Typically the launch page is an empty page with a `SMART.authorize`\n * call in it.\n *\n * This example demonstrates that the call to authorize can be postponed\n * and called manually. In this case we use ReactRouter which will match\n * the `/launch` path and render our component. Then, after our page is\n * rendered we start the auth flow.\n */\n\nexport default class Launcher extends React.Component {\n  /**\n   * This is configured to make a Standalone Launch, just in case it\n   * is loaded directly. An EHR can still launch it by passing `iss`\n   * and `launch` url parameters\n   */\n  componentDidMount() {\n    SMART.authorize({\n      clientId: 'my-client-id',\n      scope: 'launch launch/patient patient/read offline_access',\n      redirectUri: './app/dashboard',\n      iss: 'https://launch.smarthealthit.org/v/r4/sim/eyJoIjoiMSIsImIiOiIxMzU3Mzc0IiwiaiI6IjEifQ/fhir',\n      // WARNING: completeInTarget=true is needed to make this work\n      // in the codesandbox frame. It is otherwise not needed if the\n      // target is not another frame or window but since the entire\n      // example works in a frame here, it gets confused without\n      // setting this!\n      completeInTarget: false\n    });\n  }\n  /**\n   * Could also return `null` for empty page\n   */\n\n\n  render() {\n    return 'Launching...';\n  }\n\n}","map":{"version":3,"sources":["/Users/rajvansia/Documents/GitHub/material-kit-react/src/Launcher.js"],"names":["React","oauth2","SMART","Launcher","Component","componentDidMount","authorize","clientId","scope","redirectUri","iss","completeInTarget","render"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAM,IAAIC,KAAnB,QAAgC,YAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,QAAN,SAAuBH,KAAK,CAACI,SAA7B,CAAuC;AACpD;AACF;AACA;AACA;AACA;AACEC,EAAAA,iBAAiB,GAAG;AAClBH,IAAAA,KAAK,CAACI,SAAN,CAAgB;AACdC,MAAAA,QAAQ,EAAE,cADI;AAEdC,MAAAA,KAAK,EAAE,mDAFO;AAGdC,MAAAA,WAAW,EAAE,iBAHC;AAIdC,MAAAA,GAAG,EAAE,2FAJS;AAMd;AACA;AACA;AACA;AACA;AACAC,MAAAA,gBAAgB,EAAE;AAXJ,KAAhB;AAaD;AACD;AACF;AACA;;;AAEEC,EAAAA,MAAM,GAAG;AACP,WAAO,cAAP;AACD;;AA3BmD","sourcesContent":["import React from 'react';\nimport { oauth2 as SMART } from 'fhirclient';\n\n/**\n * Typically the launch page is an empty page with a `SMART.authorize`\n * call in it.\n *\n * This example demonstrates that the call to authorize can be postponed\n * and called manually. In this case we use ReactRouter which will match\n * the `/launch` path and render our component. Then, after our page is\n * rendered we start the auth flow.\n */\nexport default class Launcher extends React.Component {\n  /**\n   * This is configured to make a Standalone Launch, just in case it\n   * is loaded directly. An EHR can still launch it by passing `iss`\n   * and `launch` url parameters\n   */\n  componentDidMount() {\n    SMART.authorize({\n      clientId: 'my-client-id',\n      scope: 'launch launch/patient patient/read offline_access',\n      redirectUri: './app/dashboard',\n      iss: 'https://launch.smarthealthit.org/v/r4/sim/eyJoIjoiMSIsImIiOiIxMzU3Mzc0IiwiaiI6IjEifQ/fhir',\n\n      // WARNING: completeInTarget=true is needed to make this work\n      // in the codesandbox frame. It is otherwise not needed if the\n      // target is not another frame or window but since the entire\n      // example works in a frame here, it gets confused without\n      // setting this!\n      completeInTarget: false\n    });\n  }\n  /**\n   * Could also return `null` for empty page\n   */\n\n  render() {\n    return 'Launching...';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}