{"ast":null,"code":"import React from 'react';\nimport { oauth2 as SMART } from 'fhirclient';\nimport FHIR from 'fhirclient';\n/**\n * Typically the launch page is an empty page with a `SMART.authorize`\n * call in it.\n *\n * This example demonstrates that the call to authorize can be postponed\n * and called manually. In this case we use ReactRouter which will match\n * the `/launch` path and render our component. Then, after our page is\n * rendered we start the auth flow.\n */\n\nexport default class Launcher extends React.Component {\n  /**\n   * This is configured to make a Standalone Launch, just in case it\n   * is loaded directly. An EHR can still launch it by passing `iss`\n   * and `launch` url parameters\n   */\n  componentDidMount() {\n    SMART.authorize({\n      clientId: 'c4c03928-4356-478c-b8fb-23589a31841d',\n      scope: 'launch launch/patient patient/read offline_access patient/Patient.read patient/Observation.read patient/Observation.write patient/MedicationRequest.read ',\n      redirectUri: './app/dashboard',\n      iss: 'https://fhir-ehr-code.cerner.com/r4/',\n      // iss: 'https://r4.smarthealthit.org',\n      completeInTarget: false\n    });\n    FHIR.oauth2.ready().then(client => client.request(\"Patient\")).then(console.log('test')).catch(console.error);\n  }\n  /**\n   * Could also return `null` for empty page\n   */\n\n\n  render() {\n    return 'Launching...';\n  }\n\n} // componentDidMount() {\n//   SMART.authorize({\n//     clientId: 'my-client-id',\n//     scope: 'launch launch/patient patient/read offline_access',\n//     redirectUri: './app/dashboard',\n//     iss: 'https://launch.smarthealthit.org/v/r4/sim/eyJoIjoiMSIsImIiOiI2N2NiZjA5MC00ZGRiLTQ3OTktOTlmZi1hMjhhYmUyNzQwYjEiLCJqIjoiMSJ9/fhir',\n//     completeInTarget: false\n//   });\n//   FHIR.oauth2.ready()\n//   .then(client => client.request(\"Patient\"))\n//   .then(console.log('test'))\n//   .catch(console.error);\n// }\n// }","map":{"version":3,"sources":["/Users/rajvansia/Documents/GitHub/lab4-react-working/src/Launcher.js"],"names":["React","oauth2","SMART","FHIR","Launcher","Component","componentDidMount","authorize","clientId","scope","redirectUri","iss","completeInTarget","ready","then","client","request","console","log","catch","error","render"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAM,IAAIC,KAAnB,QAAgC,YAAhC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,QAAN,SAAuBJ,KAAK,CAACK,SAA7B,CAAuC;AACpD;AACF;AACA;AACA;AACA;AACEC,EAAAA,iBAAiB,GAAG;AAClBJ,IAAAA,KAAK,CAACK,SAAN,CAAgB;AACdC,MAAAA,QAAQ,EAAE,sCADI;AAEdC,MAAAA,KAAK,EAAE,2JAFO;AAGdC,MAAAA,WAAW,EAAE,iBAHC;AAIdC,MAAAA,GAAG,EAAE,sCAJS;AAKd;AAEAC,MAAAA,gBAAgB,EAAE;AAPJ,KAAhB;AAUAT,IAAAA,IAAI,CAACF,MAAL,CAAYY,KAAZ,GACCC,IADD,CACMC,MAAM,IAAIA,MAAM,CAACC,OAAP,CAAe,SAAf,CADhB,EAECF,IAFD,CAEMG,OAAO,CAACC,GAAR,CAAY,MAAZ,CAFN,EAGCC,KAHD,CAGOF,OAAO,CAACG,KAHf;AAID;AAIH;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAG;AACP,WAAO,cAAP;AACD;;AA/BqD,C,CAmCtD;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { oauth2 as SMART } from 'fhirclient';\nimport FHIR from 'fhirclient';\n\n\n/**\n * Typically the launch page is an empty page with a `SMART.authorize`\n * call in it.\n *\n * This example demonstrates that the call to authorize can be postponed\n * and called manually. In this case we use ReactRouter which will match\n * the `/launch` path and render our component. Then, after our page is\n * rendered we start the auth flow.\n */\nexport default class Launcher extends React.Component {\n  /**\n   * This is configured to make a Standalone Launch, just in case it\n   * is loaded directly. An EHR can still launch it by passing `iss`\n   * and `launch` url parameters\n   */\n  componentDidMount() {\n    SMART.authorize({\n      clientId: 'c4c03928-4356-478c-b8fb-23589a31841d',\n      scope: 'launch launch/patient patient/read offline_access patient/Patient.read patient/Observation.read patient/Observation.write patient/MedicationRequest.read ',\n      redirectUri: './app/dashboard',\n      iss: 'https://fhir-ehr-code.cerner.com/r4/',\n      // iss: 'https://r4.smarthealthit.org',\n\n      completeInTarget: false\n    });\n\n    FHIR.oauth2.ready()\n    .then(client => client.request(\"Patient\"))\n    .then(console.log('test'))\n    .catch(console.error);\n  }\n  \n\n\n/**\n * Could also return `null` for empty page\n */\n\nrender() {\n  return 'Launching...';\n}\n}\n\n\n// componentDidMount() {\n//   SMART.authorize({\n//     clientId: 'my-client-id',\n//     scope: 'launch launch/patient patient/read offline_access',\n//     redirectUri: './app/dashboard',\n//     iss: 'https://launch.smarthealthit.org/v/r4/sim/eyJoIjoiMSIsImIiOiI2N2NiZjA5MC00ZGRiLTQ3OTktOTlmZi1hMjhhYmUyNzQwYjEiLCJqIjoiMSJ9/fhir',\n\n//     completeInTarget: false\n//   });\n\n//   FHIR.oauth2.ready()\n//   .then(client => client.request(\"Patient\"))\n//   .then(console.log('test'))\n//   .catch(console.error);\n// }\n// }"]},"metadata":{},"sourceType":"module"}