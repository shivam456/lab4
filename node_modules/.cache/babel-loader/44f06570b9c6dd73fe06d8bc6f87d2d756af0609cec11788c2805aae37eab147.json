{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport { getThemeProps } from '@material-ui/styles';\nimport Drawer, { getAnchor, isHorizontal } from '../Drawer/Drawer';\nimport ownerDocument from '../utils/ownerDocument';\nimport ownerWindow from '../utils/ownerWindow';\nimport useEventCallback from '../utils/useEventCallback';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport { duration } from '../styles/transitions';\nimport useTheme from '../styles/useTheme';\nimport { getTransitionProps } from '../transitions/utils';\nimport NoSsr from '../NoSsr';\nimport SwipeArea from './SwipeArea'; // This value is closed to what browsers are using internally to\n// trigger a native scroll.\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst UNCERTAINTY_THRESHOLD = 3; // px\n// This is the part of the drawer displayed on touch start.\n\nconst DRAG_STARTED_SIGNAL = 20; // px\n// We can only have one instance at the time claiming ownership for handling the swipe.\n// Otherwise, the UX would be confusing.\n// That's why we use a singleton here.\n\nlet claimedSwipeInstance = null; // Exported for test purposes.\n\nexport function reset() {\n  claimedSwipeInstance = null;\n}\nfunction calculateCurrentX(anchor, touches, doc) {\n  return anchor === 'right' ? doc.body.offsetWidth - touches[0].pageX : touches[0].pageX;\n}\nfunction calculateCurrentY(anchor, touches, containerWindow) {\n  return anchor === 'bottom' ? containerWindow.innerHeight - touches[0].clientY : touches[0].clientY;\n}\nfunction getMaxTranslate(horizontalSwipe, paperInstance) {\n  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;\n}\nfunction getTranslate(currentTranslate, startLocation, open, maxTranslate) {\n  return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);\n}\n/**\n * @param {Element | null} element\n * @param {Element} rootNode\n */\n\nfunction getDomTreeShapes(element, rootNode) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129\n  const domTreeShapes = [];\n  while (element && element !== rootNode.parentElement) {\n    const style = ownerWindow(rootNode).getComputedStyle(element);\n    if (\n    // Ignore the scroll children if the element is absolute positioned.\n    style.getPropertyValue('position') === 'absolute' ||\n    // Ignore the scroll children if the element has an overflowX hidden\n    style.getPropertyValue('overflow-x') === 'hidden') {// noop\n    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {\n      // Ignore the nodes that have no width.\n      // Keep elements with a scroll\n      domTreeShapes.push(element);\n    }\n    element = element.parentElement;\n  }\n  return domTreeShapes;\n}\n/**\n * @param {object} param0\n * @param {ReturnType<getDomTreeShapes>} param0.domTreeShapes\n */\n\nfunction computeHasNativeHandler(_ref) {\n  let {\n    domTreeShapes,\n    start,\n    current,\n    anchor\n  } = _ref;\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175\n  const axisProperties = {\n    scrollPosition: {\n      x: 'scrollLeft',\n      y: 'scrollTop'\n    },\n    scrollLength: {\n      x: 'scrollWidth',\n      y: 'scrollHeight'\n    },\n    clientLength: {\n      x: 'clientWidth',\n      y: 'clientHeight'\n    }\n  };\n  return domTreeShapes.some(shape => {\n    // Determine if we are going backward or forward.\n    let goingForward = current >= start;\n    if (anchor === 'top' || anchor === 'left') {\n      goingForward = !goingForward;\n    }\n    const axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';\n    const scrollPosition = Math.round(shape[axisProperties.scrollPosition[axis]]);\n    const areNotAtStart = scrollPosition > 0;\n    const areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];\n    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {\n      return true;\n    }\n    return false;\n  });\n}\nconst iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\nconst transitionDurationDefault = {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen\n};\nconst SwipeableDrawer = /*#__PURE__*/React.forwardRef(function SwipeableDrawer(inProps, ref) {\n  const theme = useTheme();\n  const props = getThemeProps({\n    name: 'MuiSwipeableDrawer',\n    props: inProps,\n    theme\n  });\n  const {\n      anchor = 'left',\n      disableBackdropTransition = false,\n      disableDiscovery = false,\n      disableSwipeToOpen = iOS,\n      hideBackdrop,\n      hysteresis = 0.52,\n      minFlingVelocity = 450,\n      ModalProps: {\n        BackdropProps\n      } = {},\n      onClose,\n      onOpen,\n      open,\n      PaperProps = {},\n      SwipeAreaProps,\n      swipeAreaWidth = 20,\n      transitionDuration = transitionDurationDefault,\n      variant = 'temporary'\n    } = props,\n    ModalPropsProp = _objectWithoutPropertiesLoose(props.ModalProps, [\"BackdropProps\"]),\n    other = _objectWithoutPropertiesLoose(props, [\"anchor\", \"disableBackdropTransition\", \"disableDiscovery\", \"disableSwipeToOpen\", \"hideBackdrop\", \"hysteresis\", \"minFlingVelocity\", \"ModalProps\", \"onClose\", \"onOpen\", \"open\", \"PaperProps\", \"SwipeAreaProps\", \"swipeAreaWidth\", \"transitionDuration\", \"variant\"]);\n  const [maybeSwiping, setMaybeSwiping] = React.useState(false);\n  const swipeInstance = React.useRef({\n    isSwiping: null\n  });\n  const swipeAreaRef = React.useRef();\n  const backdropRef = React.useRef();\n  const paperRef = React.useRef();\n  const touchDetected = React.useRef(false); // Ref for transition duration based on / to match swipe speed\n\n  const calculatedDurationRef = React.useRef(); // Use a ref so the open value used is always up to date inside useCallback.\n\n  useEnhancedEffect(() => {\n    calculatedDurationRef.current = null;\n  }, [open]);\n  const setPosition = React.useCallback(function (translate) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      mode = null,\n      changeTransition = true\n    } = options;\n    const anchorRtl = getAnchor(theme, anchor);\n    const rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;\n    const horizontalSwipe = isHorizontal(anchor);\n    const transform = horizontalSwipe ? `translate(${rtlTranslateMultiplier * translate}px, 0)` : `translate(0, ${rtlTranslateMultiplier * translate}px)`;\n    const drawerStyle = paperRef.current.style;\n    drawerStyle.webkitTransform = transform;\n    drawerStyle.transform = transform;\n    let transition = '';\n    if (mode) {\n      transition = theme.transitions.create('all', getTransitionProps({\n        timeout: transitionDuration\n      }, {\n        mode\n      }));\n    }\n    if (changeTransition) {\n      drawerStyle.webkitTransition = transition;\n      drawerStyle.transition = transition;\n    }\n    if (!disableBackdropTransition && !hideBackdrop) {\n      const backdropStyle = backdropRef.current.style;\n      backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);\n      if (changeTransition) {\n        backdropStyle.webkitTransition = transition;\n        backdropStyle.transition = transition;\n      }\n    }\n  }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);\n  const handleBodyTouchEnd = useEventCallback(nativeEvent => {\n    if (!touchDetected.current) {\n      return;\n    }\n    claimedSwipeInstance = null;\n    touchDetected.current = false;\n    setMaybeSwiping(false); // The swipe wasn't started.\n\n    if (!swipeInstance.current.isSwiping) {\n      swipeInstance.current.isSwiping = null;\n      return;\n    }\n    swipeInstance.current.isSwiping = null;\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontal = isHorizontal(anchor);\n    let current;\n    if (horizontal) {\n      current = calculateCurrentX(anchorRtl, nativeEvent.changedTouches, ownerDocument(nativeEvent.currentTarget));\n    } else {\n      current = calculateCurrentY(anchorRtl, nativeEvent.changedTouches, ownerWindow(nativeEvent.currentTarget));\n    }\n    const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;\n    const maxTranslate = getMaxTranslate(horizontal, paperRef.current);\n    const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);\n    const translateRatio = currentTranslate / maxTranslate;\n    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {\n      // Calculate transition duration to match swipe speed\n      calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;\n    }\n    if (open) {\n      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {\n        onClose();\n      } else {\n        // Reset the position, the swipe was aborted.\n        setPosition(0, {\n          mode: 'exit'\n        });\n      }\n      return;\n    }\n    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {\n      onOpen();\n    } else {\n      // Reset the position, the swipe was aborted.\n      setPosition(getMaxTranslate(horizontal, paperRef.current), {\n        mode: 'enter'\n      });\n    }\n  });\n  const handleBodyTouchMove = useEventCallback(nativeEvent => {\n    // the ref may be null when a parent component updates while swiping\n    if (!paperRef.current || !touchDetected.current) {\n      return;\n    } // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer\n\n    if (claimedSwipeInstance !== null && claimedSwipeInstance !== swipeInstance.current) {\n      return;\n    }\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n    if (open && paperRef.current.contains(nativeEvent.target) && claimedSwipeInstance === null) {\n      const domTreeShapes = getDomTreeShapes(nativeEvent.target, paperRef.current);\n      const hasNativeHandler = computeHasNativeHandler({\n        domTreeShapes,\n        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,\n        current: horizontalSwipe ? currentX : currentY,\n        anchor\n      });\n      if (hasNativeHandler) {\n        claimedSwipeInstance = true;\n        return;\n      }\n      claimedSwipeInstance = swipeInstance.current;\n    } // We don't know yet.\n\n    if (swipeInstance.current.isSwiping == null) {\n      const dx = Math.abs(currentX - swipeInstance.current.startX);\n      const dy = Math.abs(currentY - swipeInstance.current.startY);\n      const definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;\n      if (definitelySwiping && nativeEvent.cancelable) {\n        nativeEvent.preventDefault();\n      }\n      if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {\n        swipeInstance.current.isSwiping = definitelySwiping;\n        if (!definitelySwiping) {\n          handleBodyTouchEnd(nativeEvent);\n          return;\n        } // Shift the starting point.\n\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY; // Compensate for the part of the drawer displayed on touch start.\n\n        if (!disableDiscovery && !open) {\n          if (horizontalSwipe) {\n            swipeInstance.current.startX -= DRAG_STARTED_SIGNAL;\n          } else {\n            swipeInstance.current.startY -= DRAG_STARTED_SIGNAL;\n          }\n        }\n      }\n    }\n    if (!swipeInstance.current.isSwiping) {\n      return;\n    }\n    const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);\n    let startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;\n    if (open && !swipeInstance.current.paperHit) {\n      startLocation = Math.min(startLocation, maxTranslate);\n    }\n    const translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);\n    if (open) {\n      if (!swipeInstance.current.paperHit) {\n        const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;\n        if (paperHit) {\n          swipeInstance.current.paperHit = true;\n          swipeInstance.current.startX = currentX;\n          swipeInstance.current.startY = currentY;\n        } else {\n          return;\n        }\n      } else if (translate === 0) {\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n      }\n    }\n    if (swipeInstance.current.lastTranslate === null) {\n      swipeInstance.current.lastTranslate = translate;\n      swipeInstance.current.lastTime = performance.now() + 1;\n    }\n    const velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3; // Low Pass filter.\n\n    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;\n    swipeInstance.current.lastTranslate = translate;\n    swipeInstance.current.lastTime = performance.now(); // We are swiping, let's prevent the scroll event on iOS.\n\n    if (nativeEvent.cancelable) {\n      nativeEvent.preventDefault();\n    }\n    setPosition(translate);\n  });\n  const handleBodyTouchStart = useEventCallback(nativeEvent => {\n    // We are not supposed to handle this touch move.\n    // Example of use case: ignore the event if there is a Slider.\n    if (nativeEvent.defaultPrevented) {\n      return;\n    } // We can only have one node at the time claiming ownership for handling the swipe.\n\n    if (nativeEvent.defaultMuiPrevented) {\n      return;\n    } // At least one element clogs the drawer interaction zone.\n\n    if (open && (hideBackdrop || !backdropRef.current.contains(nativeEvent.target)) && !paperRef.current.contains(nativeEvent.target)) {\n      return;\n    }\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n    if (!open) {\n      if (disableSwipeToOpen || nativeEvent.target !== swipeAreaRef.current) {\n        return;\n      }\n      if (horizontalSwipe) {\n        if (currentX > swipeAreaWidth) {\n          return;\n        }\n      } else if (currentY > swipeAreaWidth) {\n        return;\n      }\n    }\n    nativeEvent.defaultMuiPrevented = true;\n    claimedSwipeInstance = null;\n    swipeInstance.current.startX = currentX;\n    swipeInstance.current.startY = currentY;\n    setMaybeSwiping(true);\n    if (!open && paperRef.current) {\n      // The ref may be null when a parent component updates while swiping.\n      setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 15 : -DRAG_STARTED_SIGNAL), {\n        changeTransition: false\n      });\n    }\n    swipeInstance.current.velocity = 0;\n    swipeInstance.current.lastTime = null;\n    swipeInstance.current.lastTranslate = null;\n    swipeInstance.current.paperHit = false;\n    touchDetected.current = true;\n  });\n  React.useEffect(() => {\n    if (variant === 'temporary') {\n      const doc = ownerDocument(paperRef.current);\n      doc.addEventListener('touchstart', handleBodyTouchStart); // A blocking listener prevents Firefox's navbar to auto-hide on scroll.\n      // It only needs to prevent scrolling on the drawer's content when open.\n      // When closed, the overlay prevents scrolling.\n\n      doc.addEventListener('touchmove', handleBodyTouchMove, {\n        passive: !open\n      });\n      doc.addEventListener('touchend', handleBodyTouchEnd);\n      return () => {\n        doc.removeEventListener('touchstart', handleBodyTouchStart);\n        doc.removeEventListener('touchmove', handleBodyTouchMove, {\n          passive: !open\n        });\n        doc.removeEventListener('touchend', handleBodyTouchEnd);\n      };\n    }\n    return undefined;\n  }, [variant, open, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);\n  React.useEffect(() => () => {\n    // We need to release the lock.\n    if (claimedSwipeInstance === swipeInstance.current) {\n      claimedSwipeInstance = null;\n    }\n  }, []);\n  React.useEffect(() => {\n    if (!open) {\n      setMaybeSwiping(false);\n    }\n  }, [open]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Drawer, _extends({\n      open: variant === 'temporary' && maybeSwiping ? true : open,\n      variant: variant,\n      ModalProps: _extends({\n        BackdropProps: _extends({}, BackdropProps, {\n          ref: backdropRef\n        })\n      }, ModalPropsProp),\n      hideBackdrop: hideBackdrop,\n      PaperProps: _extends({}, PaperProps, {\n        style: _extends({\n          pointerEvents: variant === 'temporary' && !open ? 'none' : ''\n        }, PaperProps.style),\n        ref: paperRef\n      }),\n      anchor: anchor,\n      transitionDuration: calculatedDurationRef.current || transitionDuration,\n      onClose: onClose,\n      ref: ref\n    }, other)), !disableSwipeToOpen && variant === 'temporary' && /*#__PURE__*/_jsx(NoSsr, {\n      children: /*#__PURE__*/_jsx(SwipeArea, _extends({\n        anchor: anchor,\n        ref: swipeAreaRef,\n        width: swipeAreaWidth\n      }, SwipeAreaProps))\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SwipeableDrawer.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  anchor: PropTypes.oneOf(['bottom', 'left', 'right', 'top']),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   * @default false\n   */\n  disableBackdropTransition: PropTypes.bool,\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   * @default false\n   */\n  disableDiscovery: PropTypes.bool,\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)\n   */\n  disableSwipeToOpen: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  hideBackdrop: PropTypes.bool,\n  /**\n   * Affects how far the drawer must be opened/closed to change his state.\n   * Specified as percent (0-1) of the width of the drawer\n   * @default 0.52\n   */\n  hysteresis: PropTypes.number,\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   * @default 450\n   */\n  minFlingVelocity: PropTypes.number,\n  /**\n   * @ignore\n   */\n  ModalProps: PropTypes\n  /* @typescript-to-proptypes-ignore */.shape({\n    BackdropProps: PropTypes.shape({\n      component: elementTypeAcceptingRef\n    })\n  }),\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func.isRequired,\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func.isRequired,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool.isRequired,\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes\n  /* @typescript-to-proptypes-ignore */.shape({\n    component: elementTypeAcceptingRef,\n    style: PropTypes.object\n  }),\n  /**\n   * The element is used to intercept the touch events on the edge.\n   */\n  SwipeAreaProps: PropTypes.object,\n  /**\n   * The width of the left most (or right most) area in `px` that\n   * the drawer can be swiped open from.\n   * @default 20\n   */\n  swipeAreaWidth: PropTypes.number,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default { enter: duration.enteringScreen, exit: duration.leavingScreen }\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n  /**\n   * @ignore\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary'])\n} : void 0;\nexport default SwipeableDrawer;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","elementTypeAcceptingRef","getThemeProps","Drawer","getAnchor","isHorizontal","ownerDocument","ownerWindow","useEventCallback","useEnhancedEffect","duration","useTheme","getTransitionProps","NoSsr","SwipeArea","jsx","_jsx","jsxs","_jsxs","UNCERTAINTY_THRESHOLD","DRAG_STARTED_SIGNAL","claimedSwipeInstance","reset","calculateCurrentX","anchor","touches","doc","body","offsetWidth","pageX","calculateCurrentY","containerWindow","innerHeight","clientY","getMaxTranslate","horizontalSwipe","paperInstance","clientWidth","clientHeight","getTranslate","currentTranslate","startLocation","open","maxTranslate","Math","min","max","getDomTreeShapes","element","rootNode","domTreeShapes","parentElement","style","getComputedStyle","getPropertyValue","scrollWidth","scrollHeight","push","computeHasNativeHandler","start","current","axisProperties","scrollPosition","x","y","scrollLength","clientLength","some","shape","goingForward","axis","round","areNotAtStart","areNotAtEnd","iOS","navigator","test","userAgent","transitionDurationDefault","enter","enteringScreen","exit","leavingScreen","SwipeableDrawer","forwardRef","inProps","ref","theme","props","name","disableBackdropTransition","disableDiscovery","disableSwipeToOpen","hideBackdrop","hysteresis","minFlingVelocity","ModalProps","BackdropProps","onClose","onOpen","PaperProps","SwipeAreaProps","swipeAreaWidth","transitionDuration","variant","ModalPropsProp","other","maybeSwiping","setMaybeSwiping","useState","swipeInstance","useRef","isSwiping","swipeAreaRef","backdropRef","paperRef","touchDetected","calculatedDurationRef","setPosition","useCallback","translate","options","mode","changeTransition","anchorRtl","rtlTranslateMultiplier","indexOf","transform","drawerStyle","webkitTransform","transition","transitions","create","timeout","webkitTransition","backdropStyle","opacity","handleBodyTouchEnd","nativeEvent","horizontal","changedTouches","currentTarget","startX","startY","translateRatio","abs","velocity","handleBodyTouchMove","currentX","currentY","contains","target","hasNativeHandler","dx","dy","definitelySwiping","cancelable","preventDefault","paperHit","lastTranslate","lastTime","performance","now","handleBodyTouchStart","defaultPrevented","defaultMuiPrevented","useEffect","addEventListener","passive","removeEventListener","undefined","Fragment","children","pointerEvents","width","process","env","NODE_ENV","propTypes","oneOf","node","bool","number","component","func","isRequired","object","oneOfType","appear"],"sources":["/Users/shivamrustogi/Documents/GitHub/lab4/node_modules/@material-ui/core/SwipeableDrawer/SwipeableDrawer.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport { getThemeProps } from '@material-ui/styles';\nimport Drawer, { getAnchor, isHorizontal } from '../Drawer/Drawer';\nimport ownerDocument from '../utils/ownerDocument';\nimport ownerWindow from '../utils/ownerWindow';\nimport useEventCallback from '../utils/useEventCallback';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport { duration } from '../styles/transitions';\nimport useTheme from '../styles/useTheme';\nimport { getTransitionProps } from '../transitions/utils';\nimport NoSsr from '../NoSsr';\nimport SwipeArea from './SwipeArea'; // This value is closed to what browsers are using internally to\n// trigger a native scroll.\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst UNCERTAINTY_THRESHOLD = 3; // px\n// This is the part of the drawer displayed on touch start.\n\nconst DRAG_STARTED_SIGNAL = 20; // px\n// We can only have one instance at the time claiming ownership for handling the swipe.\n// Otherwise, the UX would be confusing.\n// That's why we use a singleton here.\n\nlet claimedSwipeInstance = null; // Exported for test purposes.\n\nexport function reset() {\n  claimedSwipeInstance = null;\n}\n\nfunction calculateCurrentX(anchor, touches, doc) {\n  return anchor === 'right' ? doc.body.offsetWidth - touches[0].pageX : touches[0].pageX;\n}\n\nfunction calculateCurrentY(anchor, touches, containerWindow) {\n  return anchor === 'bottom' ? containerWindow.innerHeight - touches[0].clientY : touches[0].clientY;\n}\n\nfunction getMaxTranslate(horizontalSwipe, paperInstance) {\n  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;\n}\n\nfunction getTranslate(currentTranslate, startLocation, open, maxTranslate) {\n  return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);\n}\n/**\n * @param {Element | null} element\n * @param {Element} rootNode\n */\n\n\nfunction getDomTreeShapes(element, rootNode) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129\n  const domTreeShapes = [];\n\n  while (element && element !== rootNode.parentElement) {\n    const style = ownerWindow(rootNode).getComputedStyle(element);\n\n    if ( // Ignore the scroll children if the element is absolute positioned.\n    style.getPropertyValue('position') === 'absolute' || // Ignore the scroll children if the element has an overflowX hidden\n    style.getPropertyValue('overflow-x') === 'hidden') {// noop\n    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {\n      // Ignore the nodes that have no width.\n      // Keep elements with a scroll\n      domTreeShapes.push(element);\n    }\n\n    element = element.parentElement;\n  }\n\n  return domTreeShapes;\n}\n/**\n * @param {object} param0\n * @param {ReturnType<getDomTreeShapes>} param0.domTreeShapes\n */\n\n\nfunction computeHasNativeHandler({\n  domTreeShapes,\n  start,\n  current,\n  anchor\n}) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175\n  const axisProperties = {\n    scrollPosition: {\n      x: 'scrollLeft',\n      y: 'scrollTop'\n    },\n    scrollLength: {\n      x: 'scrollWidth',\n      y: 'scrollHeight'\n    },\n    clientLength: {\n      x: 'clientWidth',\n      y: 'clientHeight'\n    }\n  };\n  return domTreeShapes.some(shape => {\n    // Determine if we are going backward or forward.\n    let goingForward = current >= start;\n\n    if (anchor === 'top' || anchor === 'left') {\n      goingForward = !goingForward;\n    }\n\n    const axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';\n    const scrollPosition = Math.round(shape[axisProperties.scrollPosition[axis]]);\n    const areNotAtStart = scrollPosition > 0;\n    const areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];\n\n    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {\n      return true;\n    }\n\n    return false;\n  });\n}\n\nconst iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\nconst transitionDurationDefault = {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen\n};\nconst SwipeableDrawer = /*#__PURE__*/React.forwardRef(function SwipeableDrawer(inProps, ref) {\n  const theme = useTheme();\n  const props = getThemeProps({\n    name: 'MuiSwipeableDrawer',\n    props: inProps,\n    theme\n  });\n\n  const {\n    anchor = 'left',\n    disableBackdropTransition = false,\n    disableDiscovery = false,\n    disableSwipeToOpen = iOS,\n    hideBackdrop,\n    hysteresis = 0.52,\n    minFlingVelocity = 450,\n    ModalProps: {\n      BackdropProps\n    } = {},\n    onClose,\n    onOpen,\n    open,\n    PaperProps = {},\n    SwipeAreaProps,\n    swipeAreaWidth = 20,\n    transitionDuration = transitionDurationDefault,\n    variant = 'temporary'\n  } = props,\n        ModalPropsProp = _objectWithoutPropertiesLoose(props.ModalProps, [\"BackdropProps\"]),\n        other = _objectWithoutPropertiesLoose(props, [\"anchor\", \"disableBackdropTransition\", \"disableDiscovery\", \"disableSwipeToOpen\", \"hideBackdrop\", \"hysteresis\", \"minFlingVelocity\", \"ModalProps\", \"onClose\", \"onOpen\", \"open\", \"PaperProps\", \"SwipeAreaProps\", \"swipeAreaWidth\", \"transitionDuration\", \"variant\"]);\n\n  const [maybeSwiping, setMaybeSwiping] = React.useState(false);\n  const swipeInstance = React.useRef({\n    isSwiping: null\n  });\n  const swipeAreaRef = React.useRef();\n  const backdropRef = React.useRef();\n  const paperRef = React.useRef();\n  const touchDetected = React.useRef(false); // Ref for transition duration based on / to match swipe speed\n\n  const calculatedDurationRef = React.useRef(); // Use a ref so the open value used is always up to date inside useCallback.\n\n  useEnhancedEffect(() => {\n    calculatedDurationRef.current = null;\n  }, [open]);\n  const setPosition = React.useCallback((translate, options = {}) => {\n    const {\n      mode = null,\n      changeTransition = true\n    } = options;\n    const anchorRtl = getAnchor(theme, anchor);\n    const rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;\n    const horizontalSwipe = isHorizontal(anchor);\n    const transform = horizontalSwipe ? `translate(${rtlTranslateMultiplier * translate}px, 0)` : `translate(0, ${rtlTranslateMultiplier * translate}px)`;\n    const drawerStyle = paperRef.current.style;\n    drawerStyle.webkitTransform = transform;\n    drawerStyle.transform = transform;\n    let transition = '';\n\n    if (mode) {\n      transition = theme.transitions.create('all', getTransitionProps({\n        timeout: transitionDuration\n      }, {\n        mode\n      }));\n    }\n\n    if (changeTransition) {\n      drawerStyle.webkitTransition = transition;\n      drawerStyle.transition = transition;\n    }\n\n    if (!disableBackdropTransition && !hideBackdrop) {\n      const backdropStyle = backdropRef.current.style;\n      backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);\n\n      if (changeTransition) {\n        backdropStyle.webkitTransition = transition;\n        backdropStyle.transition = transition;\n      }\n    }\n  }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);\n  const handleBodyTouchEnd = useEventCallback(nativeEvent => {\n    if (!touchDetected.current) {\n      return;\n    }\n\n    claimedSwipeInstance = null;\n    touchDetected.current = false;\n    setMaybeSwiping(false); // The swipe wasn't started.\n\n    if (!swipeInstance.current.isSwiping) {\n      swipeInstance.current.isSwiping = null;\n      return;\n    }\n\n    swipeInstance.current.isSwiping = null;\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontal = isHorizontal(anchor);\n    let current;\n\n    if (horizontal) {\n      current = calculateCurrentX(anchorRtl, nativeEvent.changedTouches, ownerDocument(nativeEvent.currentTarget));\n    } else {\n      current = calculateCurrentY(anchorRtl, nativeEvent.changedTouches, ownerWindow(nativeEvent.currentTarget));\n    }\n\n    const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;\n    const maxTranslate = getMaxTranslate(horizontal, paperRef.current);\n    const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);\n    const translateRatio = currentTranslate / maxTranslate;\n\n    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {\n      // Calculate transition duration to match swipe speed\n      calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;\n    }\n\n    if (open) {\n      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {\n        onClose();\n      } else {\n        // Reset the position, the swipe was aborted.\n        setPosition(0, {\n          mode: 'exit'\n        });\n      }\n\n      return;\n    }\n\n    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {\n      onOpen();\n    } else {\n      // Reset the position, the swipe was aborted.\n      setPosition(getMaxTranslate(horizontal, paperRef.current), {\n        mode: 'enter'\n      });\n    }\n  });\n  const handleBodyTouchMove = useEventCallback(nativeEvent => {\n    // the ref may be null when a parent component updates while swiping\n    if (!paperRef.current || !touchDetected.current) {\n      return;\n    } // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer\n\n\n    if (claimedSwipeInstance !== null && claimedSwipeInstance !== swipeInstance.current) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n\n    if (open && paperRef.current.contains(nativeEvent.target) && claimedSwipeInstance === null) {\n      const domTreeShapes = getDomTreeShapes(nativeEvent.target, paperRef.current);\n      const hasNativeHandler = computeHasNativeHandler({\n        domTreeShapes,\n        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,\n        current: horizontalSwipe ? currentX : currentY,\n        anchor\n      });\n\n      if (hasNativeHandler) {\n        claimedSwipeInstance = true;\n        return;\n      }\n\n      claimedSwipeInstance = swipeInstance.current;\n    } // We don't know yet.\n\n\n    if (swipeInstance.current.isSwiping == null) {\n      const dx = Math.abs(currentX - swipeInstance.current.startX);\n      const dy = Math.abs(currentY - swipeInstance.current.startY);\n      const definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;\n\n      if (definitelySwiping && nativeEvent.cancelable) {\n        nativeEvent.preventDefault();\n      }\n\n      if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {\n        swipeInstance.current.isSwiping = definitelySwiping;\n\n        if (!definitelySwiping) {\n          handleBodyTouchEnd(nativeEvent);\n          return;\n        } // Shift the starting point.\n\n\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY; // Compensate for the part of the drawer displayed on touch start.\n\n        if (!disableDiscovery && !open) {\n          if (horizontalSwipe) {\n            swipeInstance.current.startX -= DRAG_STARTED_SIGNAL;\n          } else {\n            swipeInstance.current.startY -= DRAG_STARTED_SIGNAL;\n          }\n        }\n      }\n    }\n\n    if (!swipeInstance.current.isSwiping) {\n      return;\n    }\n\n    const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);\n    let startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;\n\n    if (open && !swipeInstance.current.paperHit) {\n      startLocation = Math.min(startLocation, maxTranslate);\n    }\n\n    const translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);\n\n    if (open) {\n      if (!swipeInstance.current.paperHit) {\n        const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;\n\n        if (paperHit) {\n          swipeInstance.current.paperHit = true;\n          swipeInstance.current.startX = currentX;\n          swipeInstance.current.startY = currentY;\n        } else {\n          return;\n        }\n      } else if (translate === 0) {\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n      }\n    }\n\n    if (swipeInstance.current.lastTranslate === null) {\n      swipeInstance.current.lastTranslate = translate;\n      swipeInstance.current.lastTime = performance.now() + 1;\n    }\n\n    const velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3; // Low Pass filter.\n\n    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;\n    swipeInstance.current.lastTranslate = translate;\n    swipeInstance.current.lastTime = performance.now(); // We are swiping, let's prevent the scroll event on iOS.\n\n    if (nativeEvent.cancelable) {\n      nativeEvent.preventDefault();\n    }\n\n    setPosition(translate);\n  });\n  const handleBodyTouchStart = useEventCallback(nativeEvent => {\n    // We are not supposed to handle this touch move.\n    // Example of use case: ignore the event if there is a Slider.\n    if (nativeEvent.defaultPrevented) {\n      return;\n    } // We can only have one node at the time claiming ownership for handling the swipe.\n\n\n    if (nativeEvent.defaultMuiPrevented) {\n      return;\n    } // At least one element clogs the drawer interaction zone.\n\n\n    if (open && (hideBackdrop || !backdropRef.current.contains(nativeEvent.target)) && !paperRef.current.contains(nativeEvent.target)) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n\n    if (!open) {\n      if (disableSwipeToOpen || nativeEvent.target !== swipeAreaRef.current) {\n        return;\n      }\n\n      if (horizontalSwipe) {\n        if (currentX > swipeAreaWidth) {\n          return;\n        }\n      } else if (currentY > swipeAreaWidth) {\n        return;\n      }\n    }\n\n    nativeEvent.defaultMuiPrevented = true;\n    claimedSwipeInstance = null;\n    swipeInstance.current.startX = currentX;\n    swipeInstance.current.startY = currentY;\n    setMaybeSwiping(true);\n\n    if (!open && paperRef.current) {\n      // The ref may be null when a parent component updates while swiping.\n      setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 15 : -DRAG_STARTED_SIGNAL), {\n        changeTransition: false\n      });\n    }\n\n    swipeInstance.current.velocity = 0;\n    swipeInstance.current.lastTime = null;\n    swipeInstance.current.lastTranslate = null;\n    swipeInstance.current.paperHit = false;\n    touchDetected.current = true;\n  });\n  React.useEffect(() => {\n    if (variant === 'temporary') {\n      const doc = ownerDocument(paperRef.current);\n      doc.addEventListener('touchstart', handleBodyTouchStart); // A blocking listener prevents Firefox's navbar to auto-hide on scroll.\n      // It only needs to prevent scrolling on the drawer's content when open.\n      // When closed, the overlay prevents scrolling.\n\n      doc.addEventListener('touchmove', handleBodyTouchMove, {\n        passive: !open\n      });\n      doc.addEventListener('touchend', handleBodyTouchEnd);\n      return () => {\n        doc.removeEventListener('touchstart', handleBodyTouchStart);\n        doc.removeEventListener('touchmove', handleBodyTouchMove, {\n          passive: !open\n        });\n        doc.removeEventListener('touchend', handleBodyTouchEnd);\n      };\n    }\n\n    return undefined;\n  }, [variant, open, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);\n  React.useEffect(() => () => {\n    // We need to release the lock.\n    if (claimedSwipeInstance === swipeInstance.current) {\n      claimedSwipeInstance = null;\n    }\n  }, []);\n  React.useEffect(() => {\n    if (!open) {\n      setMaybeSwiping(false);\n    }\n  }, [open]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Drawer, _extends({\n      open: variant === 'temporary' && maybeSwiping ? true : open,\n      variant: variant,\n      ModalProps: _extends({\n        BackdropProps: _extends({}, BackdropProps, {\n          ref: backdropRef\n        })\n      }, ModalPropsProp),\n      hideBackdrop: hideBackdrop,\n      PaperProps: _extends({}, PaperProps, {\n        style: _extends({\n          pointerEvents: variant === 'temporary' && !open ? 'none' : ''\n        }, PaperProps.style),\n        ref: paperRef\n      }),\n      anchor: anchor,\n      transitionDuration: calculatedDurationRef.current || transitionDuration,\n      onClose: onClose,\n      ref: ref\n    }, other)), !disableSwipeToOpen && variant === 'temporary' && /*#__PURE__*/_jsx(NoSsr, {\n      children: /*#__PURE__*/_jsx(SwipeArea, _extends({\n        anchor: anchor,\n        ref: swipeAreaRef,\n        width: swipeAreaWidth\n      }, SwipeAreaProps))\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SwipeableDrawer.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  anchor: PropTypes.oneOf(['bottom', 'left', 'right', 'top']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   * @default false\n   */\n  disableBackdropTransition: PropTypes.bool,\n\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   * @default false\n   */\n  disableDiscovery: PropTypes.bool,\n\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)\n   */\n  disableSwipeToOpen: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  hideBackdrop: PropTypes.bool,\n\n  /**\n   * Affects how far the drawer must be opened/closed to change his state.\n   * Specified as percent (0-1) of the width of the drawer\n   * @default 0.52\n   */\n  hysteresis: PropTypes.number,\n\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   * @default 450\n   */\n  minFlingVelocity: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  ModalProps: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    BackdropProps: PropTypes.shape({\n      component: elementTypeAcceptingRef\n    })\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func.isRequired,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    component: elementTypeAcceptingRef,\n    style: PropTypes.object\n  }),\n\n  /**\n   * The element is used to intercept the touch events on the edge.\n   */\n  SwipeAreaProps: PropTypes.object,\n\n  /**\n   * The width of the left most (or right most) area in `px` that\n   * the drawer can be swiped open from.\n   * @default 20\n   */\n  swipeAreaWidth: PropTypes.number,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default { enter: duration.enteringScreen, exit: duration.leavingScreen }\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * @ignore\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary'])\n} : void 0;\nexport default SwipeableDrawer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}