{"ast":null,"code":"var _jsxFileName = \"/Users/rajvansia/Documents/GitHub/material-kit-react/src/components/customer/CustomerListResults.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { Avatar, Box, Card, Table, TableBody, TableCell, TableHead, TablePagination, TableRow, Typography } from '@material-ui/core';\nimport getInitials from 'src/utils/getInitials';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CustomerListResults = ({\n  customers,\n  ...rest\n}) => {\n  _s();\n\n  const [selectedCustomerIds, setSelectedCustomerIds] = useState([]);\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(0);\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedCustomerIds.indexOf(id);\n    let newSelectedCustomerIds = [];\n\n    if (selectedIndex === -1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds, id);\n    } else if (selectedIndex === 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(1));\n    } else if (selectedIndex === selectedCustomerIds.length - 1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, selectedIndex), selectedCustomerIds.slice(selectedIndex + 1));\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleLimitChange = event => {\n    setLimit(event.target.value);\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, { ...rest,\n    children: [/*#__PURE__*/_jsxDEV(PerfectScrollbar, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          minWidth: 1050\n        },\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                padding: \"checkbox\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Medication\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Dosage Instructions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Duration\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Date Prescribed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Notes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Reason for Medication\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: customers.slice(0, limit).map(customer => /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              selected: selectedCustomerIds.indexOf(customer.id) !== -1,\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                padding: \"checkbox\",\n                children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: selectedCustomerIds.indexOf(customer.id) !== -1,\n                  onChange: event => handleSelectOne(event, customer.id),\n                  value: \"true\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    alignItems: 'center',\n                    display: 'flex'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                    src: customer.avatarUrl,\n                    sx: {\n                      mr: 2\n                    },\n                    children: getInitials(customer.name)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 102,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    color: \"textPrimary\",\n                    variant: \"body1\",\n                    children: customer.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 108,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: customer.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: `${customer.address.city}, ${customer.address.state}, ${customer.address.country}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: customer.phone\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: moment(customer.createdAt).format('DD/MM/YYYY')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 19\n              }, this)]\n            }, customer.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      component: \"div\",\n      count: customers.length,\n      onPageChange: handlePageChange,\n      onRowsPerPageChange: handleLimitChange,\n      page: page,\n      rowsPerPage: limit,\n      rowsPerPageOptions: [5, 10, 25]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CustomerListResults, \"32UrhhRBCjd2Tz6LHc3GpM4px8E=\");\n\n_c = CustomerListResults;\nCustomerListResults.propTypes = {\n  customers: PropTypes.array.isRequired\n};\nexport default CustomerListResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomerListResults\");","map":{"version":3,"sources":["/Users/rajvansia/Documents/GitHub/material-kit-react/src/components/customer/CustomerListResults.js"],"names":["useState","PropTypes","moment","PerfectScrollbar","Avatar","Box","Card","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","Typography","getInitials","CustomerListResults","customers","rest","selectedCustomerIds","setSelectedCustomerIds","limit","setLimit","page","setPage","handleSelectOne","event","id","selectedIndex","indexOf","newSelectedCustomerIds","concat","slice","length","handleLimitChange","target","value","handlePageChange","newPage","minWidth","map","customer","alignItems","display","avatarUrl","mr","name","email","address","city","state","country","phone","createdAt","format","propTypes","array","isRequired"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Avatar,\n  Box,\n  Card,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Typography\n} from '@material-ui/core';\nimport getInitials from 'src/utils/getInitials';\n\nconst CustomerListResults = ({ customers, ...rest }) => {\n  const [selectedCustomerIds, setSelectedCustomerIds] = useState([]);\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(0);\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedCustomerIds.indexOf(id);\n    let newSelectedCustomerIds = [];\n\n    if (selectedIndex === -1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds, id);\n    } else if (selectedIndex === 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(1));\n    } else if (selectedIndex === selectedCustomerIds.length - 1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(\n        selectedCustomerIds.slice(0, selectedIndex),\n        selectedCustomerIds.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(event.target.value);\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  return (\n    <Card {...rest}>\n      <PerfectScrollbar>\n        <Box sx={{ minWidth: 1050 }}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell padding=\"checkbox\">\n                </TableCell>\n                <TableCell>\n                  Medication\n                </TableCell>\n                <TableCell>\n                  Dosage Instructions\n                </TableCell>\n                <TableCell>\n                  Duration\n                </TableCell>\n                <TableCell>\n                  Date Prescribed\n                </TableCell>\n                <TableCell>\n                  Notes\n                </TableCell>\n                <TableCell>\n                  Reason for Medication\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {customers.slice(0, limit).map((customer) => (\n                <TableRow\n                  hover\n                  key={customer.id}\n                  selected={selectedCustomerIds.indexOf(customer.id) !== -1}\n                >\n                  <TableCell padding=\"checkbox\">\n                    <Checkbox\n                      checked={selectedCustomerIds.indexOf(customer.id) !== -1}\n                      onChange={(event) => handleSelectOne(event, customer.id)}\n                      value=\"true\"\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <Box\n                      sx={{\n                        alignItems: 'center',\n                        display: 'flex'\n                      }}\n                    >\n                      <Avatar\n                        src={customer.avatarUrl}\n                        sx={{ mr: 2 }}\n                      >\n                        {getInitials(customer.name)}\n                      </Avatar>\n                      <Typography\n                        color=\"textPrimary\"\n                        variant=\"body1\"\n                      >\n                        {customer.name}\n                      </Typography>\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                    {customer.email}\n                  </TableCell>\n                  <TableCell>\n                    {`${customer.address.city}, ${customer.address.state}, ${customer.address.country}`}\n                  </TableCell>\n                  <TableCell>\n                    {customer.phone}\n                  </TableCell>\n                  <TableCell>\n                    {moment(customer.createdAt).format('DD/MM/YYYY')}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Box>\n      </PerfectScrollbar>\n      <TablePagination\n        component=\"div\"\n        count={customers.length}\n        onPageChange={handlePageChange}\n        onRowsPerPageChange={handleLimitChange}\n        page={page}\n        rowsPerPage={limit}\n        rowsPerPageOptions={[5, 10, 25]}\n      />\n    </Card>\n  );\n};\n\nCustomerListResults.propTypes = {\n  customers: PropTypes.array.isRequired\n};\n\nexport default CustomerListResults;\n"]},"metadata":{},"sourceType":"module"}